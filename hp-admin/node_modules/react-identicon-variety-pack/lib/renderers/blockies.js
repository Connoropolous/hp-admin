"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = renderIcon;

var _utils = require("./utils");

function createImageData(size) {
  var width = size; // Only support square icons for now

  var height = size;
  var dataWidth = Math.ceil(width / 2);
  var mirrorWidth = width - dataWidth;
  var data = [];

  for (var y = 0; y < height; y++) {
    var row = [];

    for (var x = 0; x < dataWidth; x++) {
      // this makes foreground and background color to have a 43% (1/2.3) probability
      // spot color has 13% chance
      row[x] = Math.floor((0, _utils.rand)() * 2.3);
    }

    var r = row.slice(0, mirrorWidth);
    r.reverse();
    row = row.concat(r);

    for (var i = 0; i < row.length; i++) {
      data.push(row[i]);
    }
  }

  return data;
}

function buildOpts(opts) {
  var newOpts = {};
  newOpts.seed = opts.seed || Math.floor(Math.random() * Math.pow(10, 16)).toString(16);
  (0, _utils.seedrand)(newOpts.seed);

  if (opts.size && opts.gridSize && opts.scale) {
    throw new Error("Don't specify size, gridSize *and* scale. Choose two.");
  }

  newOpts.gridSize = opts.gridSize || opts.size / opts.scale || 8;
  newOpts.scale = opts.scale || opts.size / opts.gridSize || 4;
  newOpts.size = opts.size || newOpts.gridSize * newOpts.scale;
  newOpts.color = opts.color || (0, _utils.encodeColor)((0, _utils.createColor)());
  newOpts.bgcolor = opts.bgcolor || (0, _utils.encodeColor)((0, _utils.createColor)());
  newOpts.spotcolor = opts.spotcolor || (0, _utils.encodeColor)((0, _utils.createColor)());
  return newOpts;
}

function renderIcon(opts, canvas) {
  var _buildOpts = buildOpts(opts || {}),
      gridSize = _buildOpts.gridSize,
      size = _buildOpts.size,
      scale = _buildOpts.scale,
      color = _buildOpts.color,
      spotcolor = _buildOpts.spotcolor,
      bgcolor = _buildOpts.bgcolor;

  var imageData = createImageData(gridSize);
  var width = Math.sqrt(imageData.length);
  canvas.width = canvas.height = size;
  var cc = canvas.getContext('2d');
  cc.fillStyle = bgcolor;
  cc.fillRect(0, 0, canvas.width, canvas.height);
  cc.fillStyle = color;

  for (var i = 0; i < imageData.length; i++) {
    // if data is 0, leave the background
    if (imageData[i]) {
      var row = Math.floor(i / width);
      var col = i % width; // if data is 2, choose spot color, if 1 choose foreground

      cc.fillStyle = imageData[i] === 1 ? color : spotcolor;
      cc.fillRect(col * scale, row * scale, scale, scale);
    }
  }

  return canvas;
}