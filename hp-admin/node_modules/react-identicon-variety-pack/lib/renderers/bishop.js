"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = renderIcon;

var _lodash = require("lodash");

var _utils = require("./utils");

function buildOpts(opts) {
  var newOpts = {};
  newOpts.seed = opts.seed || Math.floor(Math.random() * Math.pow(10, 16)).toString(16);
  (0, _utils.seedrand)(newOpts.seed);

  if (opts.size && opts.gridSize && opts.scale) {
    throw new Error("Don't specify size, gridSize *and* scale. Choose two.");
  }

  newOpts.gridSize = opts.gridSize || opts.size / opts.scale || 8;
  newOpts.scale = opts.scale || opts.size / opts.gridSize || 4;
  newOpts.size = opts.size || newOpts.gridSize * newOpts.scale;
  newOpts.color = opts.color || (0, _utils.createColor)();
  newOpts.bgcolor = opts.bgcolor || (0, _utils.createColor)();
  return newOpts;
}

function createBishopData(size, seed) {
  var grid = new Array(size).fill(0).map(function () {
    return new Array(size).fill(0);
  });
  var x = Math.floor((0, _utils.rand)() * size);
  var y = Math.floor((0, _utils.rand)() * size);
  grid[x][y] = grid[x][y] + 1;
  var scrambledSeed = seed.split('').sort(function () {
    return (0, _utils.rand)() - 0.5;
  }).join('');
  var bitStream = (0, _utils.getBitStream)(scrambledSeed);
  var vertical;
  var horizontal;

  do {
    vertical = bitStream.next().value;
    horizontal = bitStream.next().value;

    if (horizontal === 0) {
      if (x > 0) {
        x--;
      }
    } else {
      if (x < size - 1) {
        x++;
      }
    }

    if (vertical === 0) {
      if (y > 0) {
        y--;
      }
    } else {
      if (y < size - 1) {
        y++;
      }
    }

    grid[x][y] = grid[x][y] + 1;
  } while (!(0, _lodash.isUndefined)(vertical) && !(0, _lodash.isUndefined)(horizontal));

  return (0, _lodash.flatten)(grid.map(function (col) {
    return col.reverse();
  }));
}

function renderIcon(opts, outputCanvas) {
  var _buildOpts = buildOpts(opts || {}),
      size = _buildOpts.size,
      gridSize = _buildOpts.gridSize,
      scale = _buildOpts.scale,
      seed = _buildOpts.seed,
      color = _buildOpts.color,
      bgcolor = _buildOpts.bgcolor;

  var imageData = createBishopData(gridSize, seed);
  var width = Math.sqrt(imageData.length);
  var maxHeight = imageData.reduce(function (a, b) {
    return Math.max(a, b);
  });
  var canvas = document.createElement('canvas');
  canvas.width = canvas.height = size;
  var cc = canvas.getContext('2d');
  cc.fillStyle = (0, _utils.encodeColor)(bgcolor);
  cc.fillRect(0, 0, canvas.width, canvas.height);

  for (var i = 0; i < imageData.length; i++) {
    // if data is 0, leave the background
    if (imageData[i]) {
      var row = Math.floor(i / width);
      var col = i % width;
      cc.fillStyle = (0, _utils.encodeColor)((0, _utils.mixColors)(bgcolor, color, imageData[i] / maxHeight));
      cc.fillRect(col * scale, row * scale, scale, scale); // cc.arc(col * opts.scale, row * opts.scale, opts.scale, 0, Math.PI * 2);			
    }
  }

  outputCanvas.width = outputCanvas.height = size;
  var halfCSize = size / 2;
  var occ = outputCanvas.getContext('2d');
  occ.drawImage(canvas, 0, 0, halfCSize, halfCSize);
  occ.scale(-1, 1);
  occ.drawImage(canvas, -size, 0, halfCSize, halfCSize);
  occ.scale(1, -1);
  occ.drawImage(outputCanvas, -size, -size);
  return outputCanvas;
}