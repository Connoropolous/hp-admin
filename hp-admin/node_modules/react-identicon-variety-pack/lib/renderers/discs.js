"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = renderIcon;

var _utils = require("./utils");

function buildOpts(opts) {
  var newOpts = {};
  newOpts.seed = opts.seed || Math.floor(Math.random() * Math.pow(10, 16)).toString(16);
  (0, _utils.seedrand)(newOpts.seed);

  if (opts.size && opts.gridSize && opts.scale) {
    throw new Error("Don't specify size, gridSize *and* scale. Choose two.");
  }

  newOpts.gridSize = opts.gridSize || opts.size / opts.scale || 8;
  newOpts.scale = opts.scale || opts.size / opts.gridSize || 4;
  newOpts.size = opts.size || newOpts.gridSize * newOpts.scale;
  return newOpts;
}

function renderIcon(opts, canvas) {
  var _buildOpts = buildOpts(opts || {}),
      size = _buildOpts.size;

  canvas.width = canvas.height = size;
  var cc = canvas.getContext('2d');
  cc.fillStyle = (0, _utils.encodeColor)({
    h: 0,
    s: 0,
    l: 100 * (0, _utils.rand)()
  });
  cc.fillRect(0, 0, canvas.width, canvas.height);
  var numDiscs = 3 + (0, _utils.rand)() * 10;

  for (var i = 0; i < numDiscs; i++) {
    cc.fillStyle = (0, _utils.encodeColor)((0, _utils.createColor)());
    cc.beginPath();
    var radius = void 0;

    if (i < 2) {
      radius = (0, _utils.rand)() * size;
    } else {
      radius = (0, _utils.rand)() * size * 0.125;
    }

    cc.arc((0, _utils.rand)() * size, (0, _utils.rand)() * size, radius, 0, 2 * Math.PI);
    cc.fill();
  }

  return canvas;
}