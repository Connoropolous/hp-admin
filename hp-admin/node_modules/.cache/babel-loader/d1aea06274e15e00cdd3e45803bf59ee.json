{"ast":null,"code":"import _slicedToArray from \"/home/lisa/Documents/gitrepos/holochain/holo/happyTeam/hp-admin/hp-admin/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/home/lisa/Documents/gitrepos/holochain/holo/happyTeam/hp-admin/hp-admin/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { connect as hcWebClientConnect } from '@holochain/hc-web-client';\nimport { get } from 'lodash/fp';\nimport mockCallZome from 'mock-dnas/mockCallZome';\nexport const MOCK_DNA_CONNECTION = true || process.env.NODE_ENV === 'test';\nexport const MOCK_ENVOY_CONNECTION = true || process.env.NODE_ENV === 'test';\nexport const MOCK_HP_CONNECTION = true || process.env.NODE_ENV === 'test';\nexport const HOLOCHAIN_LOGGING = true && process.env.NODE_ENV !== 'test';\nlet holochainClient;\n\nasync function initAndGetHolochainClient() {\n  if (holochainClient) return holochainClient;\n\n  try {\n    holochainClient = await hcWebClientConnect({\n      url: process.env.REACT_APP_DNA_INTERFACE_URL,\n      wsClient: {\n        max_reconnects: 0\n      }\n    });\n\n    if (HOLOCHAIN_LOGGING) {\n      console.log('🎉 Successfully connected to Holochain!');\n    }\n  } catch (error) {\n    if (this.params.logging) {\n      console.log('😞 Holochain client connection failed -- ', error.toString());\n    }\n\n    throw error;\n  }\n}\n\nexport function createZomeCall(zomeCallPath, callOpts = {}) {\n  const DEFAULT_OPTS = {\n    logging: HOLOCHAIN_LOGGING,\n    resultParser: null\n  };\n\n  const opts = _objectSpread({}, DEFAULT_OPTS, {}, callOpts);\n\n  return async function (args = {}) {\n    try {\n      const _parseZomeCallPath = parseZomeCallPath(zomeCallPath),\n            instanceId = _parseZomeCallPath.instanceId,\n            zome = _parseZomeCallPath.zome,\n            zomeFunc = _parseZomeCallPath.zomeFunc;\n\n      let zomeCall;\n\n      if (MOCK_DNA_CONNECTION) {\n        zomeCall = mockCallZome(instanceId, zome, zomeFunc);\n      } else {\n        await initAndGetHolochainClient();\n        zomeCall = holochainClient.callZome(instanceId, zome, zomeFunc);\n      }\n\n      const rawResult = await zomeCall(args);\n      const jsonResult = JSON.parse(rawResult);\n      const error = get('Err', jsonResult) || get('SerializationError', jsonResult);\n      const rawOk = get('Ok', jsonResult);\n      if (error) throw error;\n      const result = opts.resultParser ? opts.resultParser(rawOk) : rawOk;\n\n      if (opts.logging) {\n        const detailsFormat = 'font-weight: bold; color: rgb(220, 208, 120)';\n        console.groupCollapsed(\"\\uD83D\\uDC4D \".concat(zomeCallPath, \"%c zome call complete\"), 'font-weight: normal; color: rgb(160, 160, 160)');\n        console.groupCollapsed('%cArgs', detailsFormat);\n        console.log(args);\n        console.groupEnd();\n        console.groupCollapsed('%cResult', detailsFormat);\n        console.log(result);\n        console.groupEnd();\n        console.groupEnd();\n      }\n\n      return result;\n    } catch (error) {\n      console.log(\"\\uD83D\\uDC4E %c\".concat(zomeCallPath, \"%c zome call ERROR using args: \"), 'font-weight: bold; color: rgb(220, 208, 120); color: red', 'font-weight: normal; color: rgb(160, 160, 160)', args, ' -- ', error);\n    }\n  };\n}\nexport function instanceCreateZomeCall(instanceId) {\n  return (partialZomeCallPath, callOpts = {}) => {\n    // regex removes leading slash\n    const zomeCallPath = \"\".concat(instanceId, \"/\").concat(partialZomeCallPath.replace(/^\\/+/, ''));\n    return createZomeCall(zomeCallPath, callOpts);\n  };\n}\nexport function parseZomeCallPath(zomeCallPath) {\n  const _zomeCallPath$split$r = zomeCallPath.split('/').reverse(),\n        _zomeCallPath$split$r2 = _slicedToArray(_zomeCallPath$split$r, 3),\n        zomeFunc = _zomeCallPath$split$r2[0],\n        zome = _zomeCallPath$split$r2[1],\n        instanceId = _zomeCallPath$split$r2[2];\n\n  return {\n    instanceId,\n    zome,\n    zomeFunc\n  };\n}","map":{"version":3,"sources":["/home/lisa/Documents/gitrepos/holochain/holo/happyTeam/hp-admin/hp-admin/src/holochainClient.js"],"names":["connect","hcWebClientConnect","get","mockCallZome","MOCK_DNA_CONNECTION","process","env","NODE_ENV","MOCK_ENVOY_CONNECTION","MOCK_HP_CONNECTION","HOLOCHAIN_LOGGING","holochainClient","initAndGetHolochainClient","url","REACT_APP_DNA_INTERFACE_URL","wsClient","max_reconnects","console","log","error","params","logging","toString","createZomeCall","zomeCallPath","callOpts","DEFAULT_OPTS","resultParser","opts","args","parseZomeCallPath","instanceId","zome","zomeFunc","zomeCall","callZome","rawResult","jsonResult","JSON","parse","rawOk","result","detailsFormat","groupCollapsed","groupEnd","instanceCreateZomeCall","partialZomeCallPath","replace","split","reverse"],"mappings":"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","sourcesContent":["import { connect as hcWebClientConnect } from '@holochain/hc-web-client'\nimport { get } from 'lodash/fp'\nimport mockCallZome from 'mock-dnas/mockCallZome'\n\nexport const MOCK_DNA_CONNECTION = true || process.env.NODE_ENV === 'test'\nexport const MOCK_ENVOY_CONNECTION = true || process.env.NODE_ENV === 'test'\nexport const MOCK_HP_CONNECTION = true || process.env.NODE_ENV === 'test'\n\nexport const HOLOCHAIN_LOGGING = true && process.env.NODE_ENV !== 'test'\nlet holochainClient\n\nasync function initAndGetHolochainClient () {\n  if (holochainClient) return holochainClient\n  try {\n    holochainClient = await hcWebClientConnect({\n      url: process.env.REACT_APP_DNA_INTERFACE_URL,\n      wsClient: { max_reconnects: 0 }\n    })\n    if (HOLOCHAIN_LOGGING) {\n      console.log('🎉 Successfully connected to Holochain!')\n    }\n  } catch (error) {\n    if (this.params.logging) {\n      console.log('😞 Holochain client connection failed -- ', error.toString())\n    }\n    throw (error)\n  }\n}\n\nexport function createZomeCall (zomeCallPath, callOpts = {}) {\n  const DEFAULT_OPTS = {\n    logging: HOLOCHAIN_LOGGING,\n    resultParser: null\n  }\n  const opts = {\n    ...DEFAULT_OPTS,\n    ...callOpts\n  }\n  return async function (args = {}) {\n    try {\n      const { instanceId, zome, zomeFunc } = parseZomeCallPath(zomeCallPath)\n      let zomeCall\n\n      if (MOCK_DNA_CONNECTION) {\n        zomeCall = mockCallZome(instanceId, zome, zomeFunc)\n      } else {\n        await initAndGetHolochainClient()\n        zomeCall = holochainClient.callZome(instanceId, zome, zomeFunc)\n      }\n\n      const rawResult = await zomeCall(args)\n      const jsonResult = JSON.parse(rawResult)\n      const error = get('Err', jsonResult) || get('SerializationError', jsonResult)\n      const rawOk = get('Ok', jsonResult)\n\n      if (error) throw (error)\n\n      const result = opts.resultParser ? opts.resultParser(rawOk) : rawOk\n\n      if (opts.logging) {\n        const detailsFormat = 'font-weight: bold; color: rgb(220, 208, 120)'\n\n        console.groupCollapsed(\n          `👍 ${zomeCallPath}%c zome call complete`,\n          'font-weight: normal; color: rgb(160, 160, 160)'\n        )\n        console.groupCollapsed('%cArgs', detailsFormat)\n        console.log(args)\n        console.groupEnd()\n        console.groupCollapsed('%cResult', detailsFormat)\n        console.log(result)\n        console.groupEnd()\n        console.groupEnd()\n      }\n      return result\n    } catch (error) {\n      console.log(\n        `👎 %c${zomeCallPath}%c zome call ERROR using args: `,\n        'font-weight: bold; color: rgb(220, 208, 120); color: red',\n        'font-weight: normal; color: rgb(160, 160, 160)',\n        args,\n        ' -- ',\n        error\n      )\n    }\n  }\n}\n\nexport function instanceCreateZomeCall (instanceId) {\n  return (partialZomeCallPath, callOpts = {}) => {\n    // regex removes leading slash\n    const zomeCallPath = `${instanceId}/${partialZomeCallPath.replace(/^\\/+/, '')}`\n    return createZomeCall(zomeCallPath, callOpts)\n  }\n}\n\nexport function parseZomeCallPath (zomeCallPath) {\n  const [zomeFunc, zome, instanceId] = zomeCallPath.split('/').reverse()\n\n  return { instanceId, zome, zomeFunc }\n}\n"]},"metadata":{},"sourceType":"module"}