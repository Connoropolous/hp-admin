{"ast":null,"code":"import _defineProperty from \"/home/lisa/Documents/gitrepos/holochain/holo/happyTeam/hp-admin/hp-admin/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { graphql } from '@apollo/react-hoc';\nimport { flow as compose } from 'lodash';\nvar RegisterUserMutation = { kind: \"Document\", definitions: [{ kind: \"OperationDefinition\", operation: \"mutation\", name: { kind: \"Name\", value: \"RegisterUser\" }, variableDefinitions: [{ kind: \"VariableDefinition\", variable: { kind: \"Variable\", name: { kind: \"Name\", value: \"name\" } }, type: { kind: \"NamedType\", name: { kind: \"Name\", value: \"String\" } }, directives: [] }, { kind: \"VariableDefinition\", variable: { kind: \"Variable\", name: { kind: \"Name\", value: \"avatarUrl\" } }, type: { kind: \"NamedType\", name: { kind: \"Name\", value: \"String\" } }, directives: [] }], directives: [], selectionSet: { kind: \"SelectionSet\", selections: [{ kind: \"Field\", name: { kind: \"Name\", value: \"registerUser\" }, arguments: [{ kind: \"Argument\", name: { kind: \"Name\", value: \"name\" }, value: { kind: \"Variable\", name: { kind: \"Name\", value: \"name\" } } }, { kind: \"Argument\", name: { kind: \"Name\", value: \"avatarUrl\" }, value: { kind: \"Variable\", name: { kind: \"Name\", value: \"avatarUrl\" } } }], directives: [], selectionSet: { kind: \"SelectionSet\", selections: [{ kind: \"Field\", name: { kind: \"Name\", value: \"id\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"name\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"avatarUrl\" }, arguments: [], directives: [] }] } }] } }], loc: { start: 0, end: 149, source: { body: \"mutation RegisterUser ($name: String, $avatarUrl: String) {\\n  registerUser(name: $name, avatarUrl: $avatarUrl) {\\n    id\\n    name\\n    avatarUrl\\n  }\\n}\\n\", name: \"GraphQL request\", locationOffset: { line: 1, column: 1 } } } };\nvar HyloMeQuery = { kind: \"Document\", definitions: [{ kind: \"OperationDefinition\", operation: \"query\", name: { kind: \"Name\", value: \"HyloMe\" }, variableDefinitions: [], directives: [], selectionSet: { kind: \"SelectionSet\", selections: [{ kind: \"Field\", name: { kind: \"Name\", value: \"me\" }, arguments: [], directives: [], selectionSet: { kind: \"SelectionSet\", selections: [{ kind: \"Field\", name: { kind: \"Name\", value: \"id\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"name\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"avatarUrl\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"isRegistered\" }, arguments: [], directives: [] }] } }] } }], loc: { start: 0, end: 74, source: { body: \"query HyloMe {\\n  me {\\n    id\\n    name\\n    avatarUrl\\n    isRegistered\\n  }\\n}\", name: \"GraphQL request\", locationOffset: { line: 1, column: 1 } } } };\nvar HappStoreUserQuery = { kind: \"Document\", definitions: [{ kind: \"OperationDefinition\", operation: \"query\", name: { kind: \"Name\", value: \"HappStoreUser\" }, variableDefinitions: [], directives: [], selectionSet: { kind: \"SelectionSet\", selections: [{ kind: \"Field\", name: { kind: \"Name\", value: \"happStoreUser\" }, arguments: [], directives: [], selectionSet: { kind: \"SelectionSet\", selections: [{ kind: \"Field\", name: { kind: \"Name\", value: \"name\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"hash\" }, arguments: [], directives: [] }] } }] } }], loc: { start: 0, end: 63, source: { body: \"query HappStoreUser {\\n  happStoreUser {\\n    name\\n    hash\\n  }\\n}\", name: \"GraphQL request\", locationOffset: { line: 1, column: 1 } } } };\nconst registerUser = graphql(RegisterUserMutation, {\n  props: ({\n    mutate\n  }) => {\n    return {\n      registerUser: (name, avatarUrl) => mutate({\n        variables: {\n          name,\n          avatarUrl\n        },\n        update: (cache, {\n          data: {\n            registerUser\n          }\n        }) => {\n          if (registerUser) {\n            cache.writeQuery({\n              query: HyloMeQuery,\n              data: {\n                me: _objectSpread({}, registerUser, {\n                  isRegistered: true\n                })\n              }\n            });\n          }\n        }\n      })\n    };\n  }\n});\nconst me = graphql(HyloMeQuery, {\n  props: ({\n    data: {\n      me\n    }\n  }) => ({\n    me\n  })\n});\nconst happStoreUser = graphql(HappStoreUserQuery, {\n  props: ({\n    data: {\n      happStoreUser\n    }\n  }) => ({\n    happStoreUser\n  })\n});\nexport default compose(me, happStoreUser, registerUser);","map":{"version":3,"sources":["/home/lisa/Documents/gitrepos/holochain/holo/happyTeam/hp-admin/hp-admin/src/pages/Dashboard/Dashboard.connector.js"],"names":["graphql","flow","compose","registerUser","RegisterUserMutation","props","mutate","name","avatarUrl","variables","update","cache","data","writeQuery","query","HyloMeQuery","me","isRegistered","happStoreUser","HappStoreUserQuery"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,mBAAxB;AACA,SAASC,IAAI,IAAIC,OAAjB,QAAgC,QAAhC;;;;AAKA,MAAMC,YAAY,GAAGH,OAAO,CAACI,oBAAD,EAAuB;AACjDC,EAAAA,KAAK,EAAE,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAgB;AACrB,WAAO;AACLH,MAAAA,YAAY,EAAE,CAACI,IAAD,EAAOC,SAAP,KAAqBF,MAAM,CAAC;AACxCG,QAAAA,SAAS,EAAE;AACTF,UAAAA,IADS;AAETC,UAAAA;AAFS,SAD6B;AAKxCE,QAAAA,MAAM,EAAE,CAACC,KAAD,EAAQ;AAAEC,UAAAA,IAAI,EAAE;AAAET,YAAAA;AAAF;AAAR,SAAR,KAAuC;AAC7C,cAAIA,YAAJ,EAAkB;AAChBQ,YAAAA,KAAK,CAACE,UAAN,CAAiB;AACfC,cAAAA,KAAK,EAAEC,WADQ;AAEfH,cAAAA,IAAI,EAAE;AACJI,gBAAAA,EAAE,oBAAOb,YAAP;AAAqBc,kBAAAA,YAAY,EAAE;AAAnC;AADE;AAFS,aAAjB;AAMD;AACF;AAduC,OAAD;AADpC,KAAP;AAkBD;AApBgD,CAAvB,CAA5B;AAuBA,MAAMD,EAAE,GAAGhB,OAAO,CAACe,WAAD,EAAc;AAC9BV,EAAAA,KAAK,EAAE,CAAC;AAAEO,IAAAA,IAAI,EAAE;AAAEI,MAAAA;AAAF;AAAR,GAAD,MAAuB;AAAEA,IAAAA;AAAF,GAAvB;AADuB,CAAd,CAAlB;AAGA,MAAME,aAAa,GAAGlB,OAAO,CAACmB,kBAAD,EAAqB;AAChDd,EAAAA,KAAK,EAAE,CAAC;AAAEO,IAAAA,IAAI,EAAE;AAAEM,MAAAA;AAAF;AAAR,GAAD,MAAkC;AAAEA,IAAAA;AAAF,GAAlC;AADyC,CAArB,CAA7B;AAIA,eAAehB,OAAO,CACpBc,EADoB,EAEpBE,aAFoB,EAGpBf,YAHoB,CAAtB","sourcesContent":["import { graphql } from '@apollo/react-hoc'\nimport { flow as compose } from 'lodash'\nimport RegisterUserMutation from 'graphql/RegisterUserMutation.gql'\nimport HyloMeQuery from 'graphql/HyloMeQuery.gql'\nimport HappStoreUserQuery from 'graphql/HappStoreUserQuery.gql'\n\nconst registerUser = graphql(RegisterUserMutation, {\n  props: ({ mutate }) => {\n    return {\n      registerUser: (name, avatarUrl) => mutate({\n        variables: {\n          name,\n          avatarUrl\n        },\n        update: (cache, { data: { registerUser } }) => {\n          if (registerUser) {\n            cache.writeQuery({\n              query: HyloMeQuery,\n              data: {\n                me: { ...registerUser, isRegistered: true }\n              }\n            })\n          }\n        }\n      })\n    }\n  }\n})\n\nconst me = graphql(HyloMeQuery, {\n  props: ({ data: { me } }) => ({ me })\n})\nconst happStoreUser = graphql(HappStoreUserQuery, {\n  props: ({ data: { happStoreUser } }) => ({ happStoreUser })\n})\n\nexport default compose(\n  me,\n  happStoreUser,\n  registerUser\n)\n"]},"metadata":{},"sourceType":"module"}