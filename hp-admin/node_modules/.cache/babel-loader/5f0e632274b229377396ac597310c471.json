{"ast":null,"code":"import _objectWithoutProperties from \"/home/lisa/Documents/gitrepos/holochain/holo/happyTeam/hp-admin/hp-admin/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/home/lisa/Documents/gitrepos/holochain/holo/happyTeam/hp-admin/hp-admin/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/lisa/Documents/gitrepos/holochain/holo/happyTeam/hp-admin/hp-admin/src/pages/Settings/Settings.js\";\nimport React, { useState } from 'react';\nimport useForm from 'react-hook-form';\nimport * as yup from 'yup';\nimport Header from 'components/Header';\nimport Button from 'components/Button';\nimport \"./Settings.module.css\";\nexport const PORT_NUMBER_REGEX = /^\\d{4,6}$/;\nexport const EMAIL_REGEX = /^\\S+@\\S+$/i;\nconst SettingsValidationSchema = yup.object().shape({\n  hostName: yup.string().required(),\n  hostPubKey: yup.string().required(),\n  registrationEmail: yup.string().email().required(),\n  deviceName: yup.string().required(),\n  networkId: yup.string().required(),\n  deviceAdminPort: yup.number().min(1000).max(65000).required(),\n  hcAdminPort: yup.number().min(1000).max(65000).required(),\n  hcNetworkPort: yup.number().min(1000).max(65000).required(),\n  hostingPort: yup.number().min(1000).max(65000).required()\n});\nexport function Settings({\n  settings,\n  updateSettings,\n  factoryReset,\n  toggleSshAccess\n}) {\n  const _useForm = useForm({\n    defaultValues: settings,\n    validationSchema: SettingsValidationSchema\n  }),\n        register = _useForm.register,\n        handleSubmit = _useForm.handleSubmit,\n        errors = _useForm.errors;\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        sshAccessVal = _useState2[0],\n        setSshAccess = _useState2[1];\n\n  const handleToggleSshAccess = e => {\n    e.preventDefault();\n    setSshAccess(e.target.checked);\n    toggleSshAccess();\n  };\n\n  const onSubmit = settings => {\n    updateSettings(settings);\n  };\n\n  console.log('Settings form errors (leave here until proper error handling is implemented):', errors);\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(Header, {\n    title: \"HoloPort Settings\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), React.createElement(\"strong\", {\n    style: {\n      marginTop: '20px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Name\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, settings.deviceName), React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"URL\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, settings.hostUrl), React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Network ID\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, settings.networkId), React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Access Port Numbers\"), React.createElement(\"form\", {\n    className: \"Settings-module__settings-form___1mTla\",\n    onSubmit: handleSubmit(onSubmit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(SettingsFormInput, {\n    label: \"Device Admin\",\n    name: \"deviceAdminPort\",\n    register: register,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), React.createElement(SettingsFormInput, {\n    label: \"HC Admin\",\n    name: \"hcAdminPort\",\n    register: register,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }), React.createElement(SettingsFormInput, {\n    label: \"HC Network\",\n    name: \"hcNetworkPort\",\n    register: register,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }), React.createElement(SettingsFormInput, {\n    label: \"Hosting\",\n    name: \"hostingPort\",\n    register: register,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  })), React.createElement(Button, {\n    type: \"submit\",\n    className: \"Settings-module__saveChanges___3oKZy\",\n    wide: true,\n    primary: true,\n    name: \"update-settings\",\n    value: \"Submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"Save Changes\"), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"Support Access and Factory Reset\"), React.createElement(SettingsFormInput, {\n    label: \"Access for HoloPort support (SSH)\",\n    name: \"sshAccess\",\n    type: \"checkbox\",\n    checked: sshAccessVal,\n    onChange: handleToggleSshAccess,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }), React.createElement(Button, {\n    name: \"factory-reset\",\n    className: \"Settings-module__factoryReset___3cCKQ\",\n    wide: true,\n    primary: true,\n    onClick: () => factoryReset(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"Factory Reset\"));\n}\nexport function SettingsFormInput(_ref) {\n  let name = _ref.name,\n      label = _ref.label,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'text' : _ref$type,\n      register = _ref.register,\n      inputProps = _objectWithoutProperties(_ref, [\"name\", \"label\", \"type\", \"register\"]);\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, label && React.createElement(\"label\", {\n    className: \"Settings-module__settingsLabel___274FT\",\n    \"data-for\": name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, label), React.createElement(\"input\", Object.assign({\n    className: \"Settings-module__settingsInput___1PPjo\" + (\" \" + (inputProps ? inputProps.className || \"\" : \"\")),\n    name: name,\n    id: name,\n    type: type,\n    ref: register\n  }, inputProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  })));\n}\nconst mockedProps = {\n  settings: {\n    hostName: 'My Host',\n    hostUrl: 'https://288f092.holo.host',\n    hostPubKey: 'hcsFAkeHashSTring2443223ee',\n    registrationEmail: 'iamahost@hosting.com',\n    deviceName: 'My Very First HoloPort',\n    networkId: 'my-holoport',\n    sshAccess: false,\n    deviceAdminPort: 6609,\n    hcAdminPort: 8800,\n    hcNetworkPort: 35353,\n    hostingPort: 8080\n  },\n  updateSettings: () => Promise.resolve(true),\n  factoryReset: () => Promise.resolve(true),\n  toggleSshAccess: () => Promise.resolve(true)\n};\nexport default (props => React.createElement(Settings, Object.assign({}, mockedProps, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 155\n  },\n  __self: this\n})));","map":{"version":3,"sources":["/home/lisa/Documents/gitrepos/holochain/holo/happyTeam/hp-admin/hp-admin/src/pages/Settings/Settings.js"],"names":["React","useState","useForm","yup","Header","Button","PORT_NUMBER_REGEX","EMAIL_REGEX","SettingsValidationSchema","object","shape","hostName","string","required","hostPubKey","registrationEmail","email","deviceName","networkId","deviceAdminPort","number","min","max","hcAdminPort","hcNetworkPort","hostingPort","Settings","settings","updateSettings","factoryReset","toggleSshAccess","defaultValues","validationSchema","register","handleSubmit","errors","sshAccessVal","setSshAccess","handleToggleSshAccess","e","preventDefault","target","checked","onSubmit","console","log","marginTop","hostUrl","SettingsFormInput","name","label","type","inputProps","mockedProps","sshAccess","Promise","resolve","props"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport useForm from 'react-hook-form'\nimport * as yup from 'yup'\nimport Header from 'components/Header'\nimport Button from 'components/Button'\n\nimport './Settings.module.css'\n\nexport const PORT_NUMBER_REGEX = /^\\d{4,6}$/\nexport const EMAIL_REGEX = /^\\S+@\\S+$/i\n\nconst SettingsValidationSchema = yup.object().shape({\n  hostName: yup.string().required(),\n  hostPubKey: yup.string().required(),\n  registrationEmail: yup.string()\n    .email()\n    .required(),\n  deviceName: yup.string().required(),\n  networkId: yup.string().required(),\n  deviceAdminPort: yup.number()\n    .min(1000)\n    .max(65000)\n    .required(),\n  hcAdminPort: yup.number()\n    .min(1000)\n    .max(65000)\n    .required(),\n  hcNetworkPort: yup.number()\n    .min(1000)\n    .max(65000)\n    .required(),\n  hostingPort: yup.number()\n    .min(1000)\n    .max(65000)\n    .required()\n})\n\nexport function Settings ({\n  settings,\n  updateSettings,\n  factoryReset,\n  toggleSshAccess\n}) {\n  const { register, handleSubmit, errors } = useForm({\n    defaultValues: settings,\n    validationSchema: SettingsValidationSchema\n  })\n\n  const [sshAccessVal, setSshAccess] = useState(false)\n\n  const handleToggleSshAccess = (e) => {\n    e.preventDefault()\n    setSshAccess(e.target.checked)\n    toggleSshAccess()\n  }\n\n  const onSubmit = settings => {\n    updateSettings(settings)\n  }\n\n  console.log('Settings form errors (leave here until proper error handling is implemented):', errors)\n\n  return <React.Fragment>\n    <Header title='HoloPort Settings' />\n\n    <strong style={{ marginTop: '20px' }}>Name</strong>\n    <p>\n      {settings.deviceName}\n    </p>\n\n    <strong>URL</strong>\n    <p>\n      {settings.hostUrl}\n    </p>\n\n    <strong>Network ID</strong>\n    <p>\n      {settings.networkId}\n    </p>\n\n    <strong>Access Port Numbers</strong>\n\n    <form styleName='settings-form' onSubmit={handleSubmit(onSubmit)}>\n      <SettingsFormInput\n        label='Device Admin'\n        name='deviceAdminPort'\n        register={register} />\n\n      <SettingsFormInput\n        label='HC Admin'\n        name='hcAdminPort'\n        register={register} />\n\n      <SettingsFormInput\n        label='HC Network'\n        name='hcNetworkPort'\n        register={register} />\n\n      <SettingsFormInput\n        label='Hosting'\n        name='hostingPort'\n        register={register} />\n\n    </form>\n\n    <Button type='submit' styleName='saveChanges' wide primary name='update-settings' value='Submit'>Save Changes</Button>\n\n    <hr />\n\n    <h2 >Support Access and Factory Reset</h2>\n\n    <SettingsFormInput\n      label='Access for HoloPort support (SSH)'\n      name='sshAccess'\n      type='checkbox'\n      checked={sshAccessVal}\n      onChange={handleToggleSshAccess} />\n\n    <Button name='factory-reset' styleName='factoryReset' wide primary onClick={() => factoryReset()}>Factory Reset</Button>\n  </React.Fragment>\n}\n\nexport function SettingsFormInput ({\n  name,\n  label,\n  type = 'text',\n  register,\n  ...inputProps\n}) {\n  return <React.Fragment>\n    {label && <label styleName='settingsLabel' data-for={name}>{label}</label>}\n    <input styleName='settingsInput' name={name} id={name} type={type} ref={register} {...inputProps} />\n  </React.Fragment>\n}\n\nconst mockedProps = {\n  settings: {\n    hostName: 'My Host',\n    hostUrl: 'https://288f092.holo.host',\n    hostPubKey: 'hcsFAkeHashSTring2443223ee',\n    registrationEmail: 'iamahost@hosting.com',\n    deviceName: 'My Very First HoloPort',\n    networkId: 'my-holoport',\n    sshAccess: false,\n    deviceAdminPort: 6609,\n    hcAdminPort: 8800,\n    hcNetworkPort: 35353,\n    hostingPort: 8080\n  },\n  updateSettings: () => Promise.resolve(true),\n  factoryReset: () => Promise.resolve(true),\n  toggleSshAccess: () => Promise.resolve(true)\n}\n\nexport default props => <Settings {...mockedProps} {...props} />\n"]},"metadata":{},"sourceType":"module"}