{"ast":null,"code":"import { isEmpty } from 'lodash/fp';\nimport { instanceCreateZomeCall } from \"../holochainClient\";\nimport { UNITS } from 'models/HostPricing';\nexport const INSTANCE_ID = 'hha'; // holo-hosting-app\n\nconst createZomeCall = instanceCreateZomeCall(INSTANCE_ID);\nconst HhaDnaInterface = {\n  currentUser: {\n    create: async () => {\n      const _ref = await createZomeCall('whoami/get_user')(),\n            hash = _ref.hash;\n\n      await createZomeCall('host/register_as_host')({\n        host_doc: {\n          kyc_proof: 'this value is ignored by dna'\n        }\n      });\n      return {\n        id: hash,\n        isRegistered: true\n      };\n    },\n    get: async () => {\n      const _ref2 = await createZomeCall('whoami/get_user')(),\n            hash = _ref2.hash;\n\n      const _ref3 = await createZomeCall('host/is_registered_as_host')(),\n            links = _ref3.links;\n\n      let isRegistered = false;\n\n      if (links.length > 0) {\n        isRegistered = true;\n      }\n\n      return {\n        id: hash,\n        isRegistered\n      };\n    }\n  },\n  happs: {\n    get: async appId => {\n      const hostedHapps = await createZomeCall('host/get_enabled_app_list')();\n      const hostedHappIds = hostedHapps.map(({\n        address\n      }) => address);\n      return createZomeCall('provider/get_app_details')({\n        app_hash: appId\n      }).then(happ => ({\n        id: appId,\n        happStoreId: happ.app_bundle.happ_hash,\n        isEnabled: hostedHappIds.includes(appId)\n      }));\n    },\n    enable: appId => createZomeCall('host/enable_app')({\n      app_hash: appId\n    }),\n    disable: appId => createZomeCall('host/disable_app')({\n      app_hash: appId\n    }),\n    all: async () => {\n      const allHapps = await createZomeCall('host/get_all_apps')();\n      const hostedHapps = await createZomeCall('host/get_enabled_app_list')();\n      const hostedHappIds = hostedHapps.map(({\n        address\n      }) => address);\n      return allHapps.map(({\n        hash,\n        details\n      }) => {\n        const _JSON$parse = JSON.parse(details),\n              happStoreId = _JSON$parse.Ok.app_bundle.happ_hash;\n\n        return {\n          id: hash,\n          happStoreId,\n          isEnabled: hostedHappIds.includes(hash)\n        };\n      });\n    }\n  },\n  hostPricing: {\n    get: async () => {\n      // we need an id to call get_service_log_details, and because we set all apps the same in add_service_log_details, it doesn't matter which app the id comes from\n      const happs = await HhaDnaInterface.happs.all();\n      if (isEmpty(happs)) throw new Error(\"Can't set Host Pricing: no happs available to host.\");\n      return createZomeCall('provider/get_service_log_details')({\n        app_hash: happs[0].id\n      }).then(({\n        price_per_unit: pricePerUnit\n      }) => ({\n        pricePerUnit,\n        units: UNITS.bandwidth\n      }));\n    },\n    update: async (units, pricePerUnit) => {\n      const happs = await HhaDnaInterface.happs.all(); // set price_per_unit the same for all happs\n\n      await Promise.all(happs, ({\n        id\n      }) => createZomeCall('provider/add_service_log_details')({\n        app_hash: id,\n        max_fuel_per_invoice: 1,\n        max_unpaid_value: 1,\n        price_per_unit: pricePerUnit\n      }));\n      return {\n        pricePerUnit,\n        units\n      };\n    }\n  }\n};\nexport default HhaDnaInterface;","map":{"version":3,"sources":["/home/lisa/Documents/gitrepos/holochain/holo/happyTeam/hp-admin/hp-admin/src/data-interfaces/HhaDnaInterface.js"],"names":["isEmpty","instanceCreateZomeCall","UNITS","INSTANCE_ID","createZomeCall","HhaDnaInterface","currentUser","create","hash","host_doc","kyc_proof","id","isRegistered","get","links","length","happs","appId","hostedHapps","hostedHappIds","map","address","app_hash","then","happ","happStoreId","app_bundle","happ_hash","isEnabled","includes","enable","disable","all","allHapps","details","JSON","parse","Ok","hostPricing","Error","price_per_unit","pricePerUnit","units","bandwidth","update","Promise","max_fuel_per_invoice","max_unpaid_value"],"mappings":"AAAA,SAASA,OAAT,QAAwB,WAAxB;AACA,SAASC,sBAAT;AACA,SAASC,KAAT,QAAsB,oBAAtB;AAEA,OAAO,MAAMC,WAAW,GAAG,KAApB,C,CAA0B;;AACjC,MAAMC,cAAc,GAAGH,sBAAsB,CAACE,WAAD,CAA7C;AAEA,MAAME,eAAe,GAAG;AACtBC,EAAAA,WAAW,EAAE;AACXC,IAAAA,MAAM,EAAE,YAAY;AAAA,mBACD,MAAMH,cAAc,CAAC,iBAAD,CAAd,EADL;AAAA,YACVI,IADU,QACVA,IADU;;AAElB,YAAMJ,cAAc,CAAC,uBAAD,CAAd,CAAwC;AAAEK,QAAAA,QAAQ,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb;AAAZ,OAAxC,CAAN;AACA,aAAO;AACLC,QAAAA,EAAE,EAAEH,IADC;AAELI,QAAAA,YAAY,EAAE;AAFT,OAAP;AAID,KARU;AASXC,IAAAA,GAAG,EAAE,YAAY;AAAA,oBACE,MAAMT,cAAc,CAAC,iBAAD,CAAd,EADR;AAAA,YACPI,IADO,SACPA,IADO;;AAAA,oBAEG,MAAMJ,cAAc,CAAC,4BAAD,CAAd,EAFT;AAAA,YAEPU,KAFO,SAEPA,KAFO;;AAGf,UAAIF,YAAY,GAAG,KAAnB;;AACA,UAAIE,KAAK,CAACC,MAAN,GAAe,CAAnB,EAAsB;AACpBH,QAAAA,YAAY,GAAG,IAAf;AACD;;AACD,aAAO;AACLD,QAAAA,EAAE,EAAEH,IADC;AAELI,QAAAA;AAFK,OAAP;AAID;AApBU,GADS;AAwBtBI,EAAAA,KAAK,EAAE;AACLH,IAAAA,GAAG,EAAE,MAAMI,KAAN,IAAe;AAClB,YAAMC,WAAW,GAAG,MAAMd,cAAc,CAAC,2BAAD,CAAd,EAA1B;AACA,YAAMe,aAAa,GAAGD,WAAW,CAACE,GAAZ,CAAgB,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAiBA,OAAjC,CAAtB;AACA,aAAOjB,cAAc,CAAC,0BAAD,CAAd,CAA2C;AAAEkB,QAAAA,QAAQ,EAAEL;AAAZ,OAA3C,EACJM,IADI,CACCC,IAAI,KAAK;AACbb,QAAAA,EAAE,EAAEM,KADS;AAEbQ,QAAAA,WAAW,EAAED,IAAI,CAACE,UAAL,CAAgBC,SAFhB;AAGbC,QAAAA,SAAS,EAAET,aAAa,CAACU,QAAd,CAAuBZ,KAAvB;AAHE,OAAL,CADL,CAAP;AAMD,KAVI;AAWLa,IAAAA,MAAM,EAAEb,KAAK,IAAIb,cAAc,CAAC,iBAAD,CAAd,CAAkC;AAAEkB,MAAAA,QAAQ,EAAEL;AAAZ,KAAlC,CAXZ;AAYLc,IAAAA,OAAO,EAAEd,KAAK,IAAIb,cAAc,CAAC,kBAAD,CAAd,CAAmC;AAAEkB,MAAAA,QAAQ,EAAEL;AAAZ,KAAnC,CAZb;AAaLe,IAAAA,GAAG,EAAE,YAAY;AACf,YAAMC,QAAQ,GAAG,MAAM7B,cAAc,CAAC,mBAAD,CAAd,EAAvB;AACA,YAAMc,WAAW,GAAG,MAAMd,cAAc,CAAC,2BAAD,CAAd,EAA1B;AACA,YAAMe,aAAa,GAAGD,WAAW,CAACE,GAAZ,CAAgB,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAiBA,OAAjC,CAAtB;AAEA,aAAOY,QAAQ,CAACb,GAAT,CAAa,CAAC;AAAEZ,QAAAA,IAAF;AAAQ0B,QAAAA;AAAR,OAAD,KAAuB;AAAA,4BACkBC,IAAI,CAACC,KAAL,CAAWF,OAAX,CADlB;AAAA,cACFT,WADE,eACjCY,EADiC,CAC3BX,UAD2B,CACbC,SADa;;AAEzC,eAAO;AACLhB,UAAAA,EAAE,EAAEH,IADC;AAELiB,UAAAA,WAFK;AAGLG,UAAAA,SAAS,EAAET,aAAa,CAACU,QAAd,CAAuBrB,IAAvB;AAHN,SAAP;AAKD,OAPM,CAAP;AAQD;AA1BI,GAxBe;AAqDtB8B,EAAAA,WAAW,EAAE;AACXzB,IAAAA,GAAG,EAAE,YAAY;AACf;AACA,YAAMG,KAAK,GAAG,MAAMX,eAAe,CAACW,KAAhB,CAAsBgB,GAAtB,EAApB;AACA,UAAIhC,OAAO,CAACgB,KAAD,CAAX,EAAoB,MAAM,IAAIuB,KAAJ,CAAU,qDAAV,CAAN;AACpB,aAAOnC,cAAc,CAAC,kCAAD,CAAd,CAAmD;AAAEkB,QAAAA,QAAQ,EAAEN,KAAK,CAAC,CAAD,CAAL,CAASL;AAArB,OAAnD,EACJY,IADI,CACC,CAAC;AAAEiB,QAAAA,cAAc,EAAEC;AAAlB,OAAD,MAAuC;AAC3CA,QAAAA,YAD2C;AAE3CC,QAAAA,KAAK,EAAExC,KAAK,CAACyC;AAF8B,OAAvC,CADD,CAAP;AAKD,KAVU;AAWXC,IAAAA,MAAM,EAAE,OAAOF,KAAP,EAAcD,YAAd,KAA+B;AACrC,YAAMzB,KAAK,GAAG,MAAMX,eAAe,CAACW,KAAhB,CAAsBgB,GAAtB,EAApB,CADqC,CAErC;;AACA,YAAMa,OAAO,CAACb,GAAR,CAAYhB,KAAZ,EAAmB,CAAC;AAAEL,QAAAA;AAAF,OAAD,KAAYP,cAAc,CAAC,kCAAD,CAAd,CAAmD;AACtFkB,QAAAA,QAAQ,EAAEX,EAD4E;AAEtFmC,QAAAA,oBAAoB,EAAE,CAFgE;AAGtFC,QAAAA,gBAAgB,EAAE,CAHoE;AAItFP,QAAAA,cAAc,EAAEC;AAJsE,OAAnD,CAA/B,CAAN;AAOA,aAAO;AACLA,QAAAA,YADK;AAELC,QAAAA;AAFK,OAAP;AAID;AAzBU;AArDS,CAAxB;AAkFA,eAAerC,eAAf","sourcesContent":["import { isEmpty } from 'lodash/fp'\nimport { instanceCreateZomeCall } from '../holochainClient'\nimport { UNITS } from 'models/HostPricing'\n\nexport const INSTANCE_ID = 'hha' // holo-hosting-app\nconst createZomeCall = instanceCreateZomeCall(INSTANCE_ID)\n\nconst HhaDnaInterface = {\n  currentUser: {\n    create: async () => {\n      const { hash } = await createZomeCall('whoami/get_user')()\n      await createZomeCall('host/register_as_host')({ host_doc: { kyc_proof: 'this value is ignored by dna' } })\n      return {\n        id: hash,\n        isRegistered: true\n      }\n    },\n    get: async () => {\n      const { hash } = await createZomeCall('whoami/get_user')()\n      const { links } = await createZomeCall('host/is_registered_as_host')()\n      let isRegistered = false\n      if (links.length > 0) {\n        isRegistered = true\n      }\n      return {\n        id: hash,\n        isRegistered\n      }\n    }\n  },\n\n  happs: {\n    get: async appId => {\n      const hostedHapps = await createZomeCall('host/get_enabled_app_list')()\n      const hostedHappIds = hostedHapps.map(({ address }) => address)\n      return createZomeCall('provider/get_app_details')({ app_hash: appId })\n        .then(happ => ({\n          id: appId,\n          happStoreId: happ.app_bundle.happ_hash,\n          isEnabled: hostedHappIds.includes(appId)\n        }))\n    },\n    enable: appId => createZomeCall('host/enable_app')({ app_hash: appId }),\n    disable: appId => createZomeCall('host/disable_app')({ app_hash: appId }),\n    all: async () => {\n      const allHapps = await createZomeCall('host/get_all_apps')()\n      const hostedHapps = await createZomeCall('host/get_enabled_app_list')()\n      const hostedHappIds = hostedHapps.map(({ address }) => address)\n\n      return allHapps.map(({ hash, details }) => {\n        const { Ok: { app_bundle: { happ_hash: happStoreId } } } = JSON.parse(details)\n        return {\n          id: hash,\n          happStoreId,\n          isEnabled: hostedHappIds.includes(hash)\n        }\n      })\n    }\n  },\n\n  hostPricing: {\n    get: async () => {\n      // we need an id to call get_service_log_details, and because we set all apps the same in add_service_log_details, it doesn't matter which app the id comes from\n      const happs = await HhaDnaInterface.happs.all()\n      if (isEmpty(happs)) throw new Error(\"Can't set Host Pricing: no happs available to host.\")\n      return createZomeCall('provider/get_service_log_details')({ app_hash: happs[0].id })\n        .then(({ price_per_unit: pricePerUnit }) => ({\n          pricePerUnit,\n          units: UNITS.bandwidth\n        }))\n    },\n    update: async (units, pricePerUnit) => {\n      const happs = await HhaDnaInterface.happs.all()\n      // set price_per_unit the same for all happs\n      await Promise.all(happs, ({ id }) => createZomeCall('provider/add_service_log_details')({\n        app_hash: id,\n        max_fuel_per_invoice: 1,\n        max_unpaid_value: 1,\n        price_per_unit: pricePerUnit\n      }))\n\n      return {\n        pricePerUnit,\n        units\n      }\n    }\n  }\n}\n\nexport default HhaDnaInterface\n"]},"metadata":{},"sourceType":"module"}