{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = renderIcon;\n\nvar _lodash = require(\"lodash\");\n\nvar _utils = require(\"./utils\");\n\nfunction buildOpts(opts) {\n  var newOpts = {};\n  newOpts.seed = opts.seed || Math.floor(Math.random() * Math.pow(10, 16)).toString(16);\n  (0, _utils.seedrand)(newOpts.seed);\n\n  if (opts.size && opts.gridSize && opts.scale) {\n    throw new Error(\"Don't specify size, gridSize *and* scale. Choose two.\");\n  }\n\n  newOpts.gridSize = opts.gridSize || opts.size / opts.scale || 8;\n  newOpts.scale = opts.scale || opts.size / opts.gridSize || 4;\n  newOpts.size = opts.size || newOpts.gridSize * newOpts.scale;\n  newOpts.color = opts.color || (0, _utils.createColor)();\n  newOpts.bgcolor = opts.bgcolor || (0, _utils.createColor)();\n  return newOpts;\n}\n\nfunction createBishopData(size, seed) {\n  var grid = new Array(size).fill(0).map(function () {\n    return new Array(size).fill(0);\n  });\n  var x = Math.floor((0, _utils.rand)() * size);\n  var y = Math.floor((0, _utils.rand)() * size);\n  grid[x][y] = grid[x][y] + 1;\n  var scrambledSeed = seed.split('').sort(function () {\n    return (0, _utils.rand)() - 0.5;\n  }).join('');\n  var bitStream = (0, _utils.getBitStream)(scrambledSeed);\n  var vertical;\n  var horizontal;\n\n  do {\n    vertical = bitStream.next().value;\n    horizontal = bitStream.next().value;\n\n    if (horizontal === 0) {\n      if (x > 0) {\n        x--;\n      }\n    } else {\n      if (x < size - 1) {\n        x++;\n      }\n    }\n\n    if (vertical === 0) {\n      if (y > 0) {\n        y--;\n      }\n    } else {\n      if (y < size - 1) {\n        y++;\n      }\n    }\n\n    grid[x][y] = grid[x][y] + 1;\n  } while (!(0, _lodash.isUndefined)(vertical) && !(0, _lodash.isUndefined)(horizontal));\n\n  return (0, _lodash.flatten)(grid.map(function (col) {\n    return col.reverse();\n  }));\n}\n\nfunction renderIcon(opts, outputCanvas) {\n  var _buildOpts = buildOpts(opts || {}),\n      size = _buildOpts.size,\n      gridSize = _buildOpts.gridSize,\n      scale = _buildOpts.scale,\n      seed = _buildOpts.seed,\n      color = _buildOpts.color,\n      bgcolor = _buildOpts.bgcolor;\n\n  var imageData = createBishopData(gridSize, seed);\n  var width = Math.sqrt(imageData.length);\n  var maxHeight = imageData.reduce(function (a, b) {\n    return Math.max(a, b);\n  });\n  var canvas = document.createElement('canvas');\n  canvas.width = canvas.height = size;\n  var cc = canvas.getContext('2d');\n  cc.fillStyle = (0, _utils.encodeColor)(bgcolor);\n  cc.fillRect(0, 0, canvas.width, canvas.height);\n\n  for (var i = 0; i < imageData.length; i++) {\n    // if data is 0, leave the background\n    if (imageData[i]) {\n      var row = Math.floor(i / width);\n      var col = i % width;\n      cc.fillStyle = (0, _utils.encodeColor)((0, _utils.mixColors)(bgcolor, color, imageData[i] / maxHeight));\n      cc.fillRect(col * scale, row * scale, scale, scale); // cc.arc(col * opts.scale, row * opts.scale, opts.scale, 0, Math.PI * 2);\t\t\t\n    }\n  }\n\n  outputCanvas.width = outputCanvas.height = size;\n  var halfCSize = size / 2;\n  var occ = outputCanvas.getContext('2d');\n  occ.drawImage(canvas, 0, 0, halfCSize, halfCSize);\n  occ.scale(-1, 1);\n  occ.drawImage(canvas, -size, 0, halfCSize, halfCSize);\n  occ.scale(1, -1);\n  occ.drawImage(outputCanvas, -size, -size);\n  return outputCanvas;\n}","map":null,"metadata":{},"sourceType":"script"}