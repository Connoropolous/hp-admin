{"ast":null,"code":"import _slicedToArray from \"/home/lisa/Documents/gitrepos/holochain/holo/happyTeam/hp-admin/hp-admin/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/lisa/Documents/gitrepos/holochain/holo/happyTeam/hp-admin/hp-admin/src/pages/holofuel/TransactionHistory/TransactionHistory.js\";\nimport _getClassName from \"babel-plugin-react-css-modules/dist/browser/getClassName\";\nconst _styleModuleImportMap = {\n  \"./TransactionHistory.module.css\": {\n    \"account-ledger-table\": \"TransactionHistory-module__account-ledger-table___X0DJQ\",\n    \"completed-transactions-title\": \"TransactionHistory-module__completed-transactions-title___fg0QV\",\n    \"completed-transactions-table\": \"TransactionHistory-module__completed-transactions-table___2f0HN\",\n    \"completed-tx-col\": \"TransactionHistory-module__completed-tx-col___1uUw5\",\n    \"table-header-row\": \"TransactionHistory-module__table-header-row___errGY\",\n    \"table-headers\": \"TransactionHistory-module__table-headers___1-6UX\",\n    \"table-content-row\": \"TransactionHistory-module__table-content-row___3ik8k\",\n    \"pending-transaction\": \"TransactionHistory-module__pending-transaction___1g9WN\",\n    \"table-content\": \"TransactionHistory-module__table-content___1BDrm\",\n    \"red-text\": \"TransactionHistory-module__red-text___2xwi6\",\n    \"green-text\": \"TransactionHistory-module__green-text___3mFQE\",\n    \"italic\": \"TransactionHistory-module__italic___2AkuJ\",\n    \"align-left\": \"TransactionHistory-module__align-left___WWW01\",\n    \"align-right\": \"TransactionHistory-module__align-right___bhd8R\",\n    \"cancel-button\": \"TransactionHistory-module__cancel-button___3QSEg\",\n    \"modal\": \"TransactionHistory-module__modal___2UkRO\",\n    \"modal-title\": \"TransactionHistory-module__modal-title___17u91\",\n    \"modal-text\": \"TransactionHistory-module__modal-text___2uREr\",\n    \"modal-counterparty\": \"TransactionHistory-module__modal-counterparty___2tE36\",\n    \"modal-amount\": \"TransactionHistory-module__modal-amount___1Eb2f\",\n    \"modal-buttons\": \"TransactionHistory-module__modal-buttons___3p_gg\",\n    \"modal-button\": \"TransactionHistory-module__modal-button___1CCPB\",\n    \"modal-button-no\": \"TransactionHistory-module__modal-button-no___2O3w3\",\n    \"modal-button-yes\": \"TransactionHistory-module__modal-button-yes___2lfzj\"\n  }\n};\nimport React, { useState } from 'react';\nimport moment from 'moment';\nimport cx from 'classnames';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { isEmpty } from 'lodash/fp';\nimport \"./TransactionHistory.module.css\";\nimport Header from 'components/holofuel/Header';\nimport Button from 'components/holofuel/Button';\nimport Modal from 'components/holofuel/Modal';\nvar HolofuelUserQuery = { kind: \"Document\", definitions: [{ kind: \"OperationDefinition\", operation: \"query\", name: { kind: \"Name\", value: \"HolofuelUser\" }, variableDefinitions: [{ kind: \"VariableDefinition\", variable: { kind: \"Variable\", name: { kind: \"Name\", value: \"agentId\" } }, type: { kind: \"NamedType\", name: { kind: \"Name\", value: \"String\" } }, directives: [] }], directives: [], selectionSet: { kind: \"SelectionSet\", selections: [{ kind: \"Field\", name: { kind: \"Name\", value: \"holofuelUser\" }, arguments: [{ kind: \"Argument\", name: { kind: \"Name\", value: \"agentId\" }, value: { kind: \"Variable\", name: { kind: \"Name\", value: \"agentId\" } } }], directives: [], selectionSet: { kind: \"SelectionSet\", selections: [{ kind: \"Field\", name: { kind: \"Name\", value: \"id\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"nickname\" }, arguments: [], directives: [] }] } }] } }], loc: { start: 0, end: 101, source: { body: \"query HolofuelUser($agentId: String) {\\n  holofuelUser(agentId: $agentId) {\\n    id\\n    nickname\\n  }\\n}\\n\", name: \"GraphQL request\", locationOffset: { line: 1, column: 1 } } } };\nvar HolofuelCompletedTransactionsQuery = { kind: \"Document\", definitions: [{ kind: \"OperationDefinition\", operation: \"query\", name: { kind: \"Name\", value: \"HolofuelCompletedTransactionsQuery\" }, variableDefinitions: [], directives: [], selectionSet: { kind: \"SelectionSet\", selections: [{ kind: \"Field\", name: { kind: \"Name\", value: \"holofuelCompletedTransactions\" }, arguments: [], directives: [], selectionSet: { kind: \"SelectionSet\", selections: [{ kind: \"Field\", name: { kind: \"Name\", value: \"id\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"amount\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"counterparty\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"direction\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"status\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"type\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"timestamp\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"fees\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"presentBalance\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"notes\" }, arguments: [], directives: [] }] } }] } }], loc: { start: 0, end: 204, source: { body: \"query HolofuelCompletedTransactionsQuery {\\n  holofuelCompletedTransactions {\\n    id\\n    amount\\n    counterparty\\n    direction\\n    status\\n    type\\n    timestamp\\n    fees\\n    presentBalance\\n    notes\\n  }\\n}\\n\", name: \"GraphQL request\", locationOffset: { line: 1, column: 1 } } } };\nvar HolofuelWaitingTransactionsQuery = { kind: \"Document\", definitions: [{ kind: \"OperationDefinition\", operation: \"query\", name: { kind: \"Name\", value: \"HolofuelWaitingTransactionsQuery\" }, variableDefinitions: [], directives: [], selectionSet: { kind: \"SelectionSet\", selections: [{ kind: \"Field\", name: { kind: \"Name\", value: \"holofuelWaitingTransactions\" }, arguments: [], directives: [], selectionSet: { kind: \"SelectionSet\", selections: [{ kind: \"Field\", name: { kind: \"Name\", value: \"id\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"amount\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"counterparty\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"direction\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"status\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"type\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"timestamp\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"notes\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"fees\" }, arguments: [], directives: [] }] } }] } }], loc: { start: 0, end: 181, source: { body: \"query HolofuelWaitingTransactionsQuery {\\n  holofuelWaitingTransactions {\\n    id\\n    amount\\n    counterparty\\n    direction\\n    status\\n    type\\n    timestamp\\n    notes\\n    fees\\n  }\\n}\\n\", name: \"GraphQL request\", locationOffset: { line: 1, column: 1 } } } };\nvar HolofuelCancelMutation = { kind: \"Document\", definitions: [{ kind: \"OperationDefinition\", operation: \"mutation\", name: { kind: \"Name\", value: \"HolofuelCancelMutation\" }, variableDefinitions: [{ kind: \"VariableDefinition\", variable: { kind: \"Variable\", name: { kind: \"Name\", value: \"transactionId\" } }, type: { kind: \"NamedType\", name: { kind: \"Name\", value: \"ID\" } }, directives: [] }], directives: [], selectionSet: { kind: \"SelectionSet\", selections: [{ kind: \"Field\", name: { kind: \"Name\", value: \"holofuelCancel\" }, arguments: [{ kind: \"Argument\", name: { kind: \"Name\", value: \"transactionId\" }, value: { kind: \"Variable\", name: { kind: \"Name\", value: \"transactionId\" } } }], directives: [], selectionSet: { kind: \"SelectionSet\", selections: [{ kind: \"Field\", name: { kind: \"Name\", value: \"id\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"amount\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"counterparty\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"direction\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"status\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"type\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"timestamp\" }, arguments: [], directives: [] }] } }] } }], loc: { start: 0, end: 194, source: { body: \"mutation HolofuelCancelMutation ($transactionId: ID) {\\n  holofuelCancel(transactionId: $transactionId) {\\n    id\\n    amount\\n    counterparty\\n    direction\\n    status\\n    type\\n    timestamp\\n  }\\n}\\n\", name: \"GraphQL request\", locationOffset: { line: 1, column: 1 } } } };\n\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\nexport const makeDisplayName = agentHash => agentHash.substring(agentHash.length - 7) || '';\nexport function formatDateTime(isoDate) {\n  const dateDifference = moment(isoDate).fromNow(); // If over a year ago, include the year in date\n\n  if (dateDifference.split(' ')[1] === 'days' && parseInt(dateDifference.split(' ')[0]) > 365) {\n    return {\n      date: moment(isoDate).format('MMMM D YYYY'),\n      time: moment(isoDate).format('h:mm') // If over a week ago, include the month and day in date\n\n    };\n  } else if (dateDifference.split(' ')[1] === 'days' && parseInt(dateDifference.split(' ')[0]) >= 7) {\n    return {\n      date: moment(isoDate).format('MMMM D'),\n      time: moment(isoDate).format('h:mm') // If within a week ago, state days lapsed in date\n\n    };\n  } else if (dateDifference.split(' ')[1] === 'days' && parseInt(dateDifference.split(' ')[0]) >= 1) {\n    return {\n      date: dateDifference,\n      time: moment(isoDate).format('h:mm') // If less than a day ago, state hours lapsed in time\n\n    };\n  } else if (dateDifference.split(' ')[1] === 'hours' && parseInt(moment(isoDate).startOf('hour').fromNow().split(' ')[0]) > 1) {\n    return {\n      date: 'Today',\n      time: moment(isoDate).fromNow() // .startOf('hour')\n\n    };\n  } else {\n    // If less than an hour ago, state minutes lapsed in time\n    return {\n      date: 'Today',\n      time: moment(isoDate).fromNow() // .startOf('minute')\n\n    };\n  }\n}\n\nfunction useCancel() {\n  const _useMutation = useMutation(HolofuelCancelMutation),\n        _useMutation2 = _slicedToArray(_useMutation, 1),\n        cancel = _useMutation2[0];\n\n  return id => cancel({\n    variables: {\n      transactionId: id\n    },\n    refetchQueries: [{\n      query: HolofuelCompletedTransactionsQuery\n    }, {\n      query: HolofuelWaitingTransactionsQuery\n    }]\n  });\n}\n\nexport default function TransactionsHistory({\n  history: {\n    push\n  }\n}) {\n  const _useQuery = useQuery(HolofuelUserQuery),\n        _useQuery$data$holofu = _useQuery.data.holofuelUser,\n        whoami = _useQuery$data$holofu === void 0 ? {} : _useQuery$data$holofu;\n\n  const _useQuery2 = useQuery(HolofuelCompletedTransactionsQuery),\n        _useQuery2$data$holof = _useQuery2.data.holofuelCompletedTransactions,\n        completedTransactions = _useQuery2$data$holof === void 0 ? [] : _useQuery2$data$holof;\n\n  const _useQuery3 = useQuery(HolofuelWaitingTransactionsQuery),\n        _useQuery3$data$holof = _useQuery3.data.holofuelWaitingTransactions,\n        pendingTransactions = _useQuery3$data$holof === void 0 ? [] : _useQuery3$data$holof;\n\n  console.log('current Agent : ', whoami);\n  const cancelTransaction = useCancel();\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        modalTransaction = _useState2[0],\n        setModalTransaction = _useState2[1];\n\n  const showCancellationModal = transaction => setModalTransaction(transaction); // NOTE: Column Header Titles (or null) => This provides a space fore easy updating of headers, should we decide to rename or substitute a null header with a title.\n\n\n  const headings = [null, null, 'Fees', 'Amount', null];\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(Header, {\n    title: \"HoloFuel\",\n    accountNumber: \"AC1903F8EAAC1903F8EA\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), React.createElement(\"section\", {\n    className: \"TransactionHistory-module__account-ledger-table___X0DJQ\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"TransactionHistory-module__completed-transactions-title___fg0QV\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"History\"), React.createElement(\"table\", {\n    className: \"TransactionHistory-module__completed-transactions-table___2f0HN\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    key: \"heading\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, headings && headings.map((header, contentIndex) => {\n    return React.createElement(TransactionTableHeading, {\n      key: \"heading-\".concat(contentIndex),\n      content: header,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    });\n  }))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, !isEmpty(pendingTransactions) && pendingTransactions.map(pendingTx => {\n    return React.createElement(LedgerTransactionsTable, {\n      transaction: pendingTx,\n      key: pendingTx.id,\n      showCancellationModal: showCancellationModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    });\n  }), !isEmpty(completedTransactions) && completedTransactions.map(completeTx => {\n    return React.createElement(LedgerTransactionsTable, {\n      transaction: completeTx,\n      key: completeTx.id,\n      showCancellationModal: showCancellationModal,\n      completed: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    });\n  })))), React.createElement(ConfirmCancellationModal, {\n    handleClose: () => setModalTransaction(null),\n    transaction: modalTransaction,\n    cancelTransaction: cancelTransaction,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }));\n}\n\nconst TransactionTableHeading = ({\n  content\n}) => {\n  return React.createElement(\"th\", {\n    id: content ? content.toLowerCase() : null,\n    className: \"TransactionHistory-module__completed-tx-col___1uUw5 TransactionHistory-module__table-headers___1-6UX\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, content || null);\n};\n\nexport function LedgerTransactionsTable({\n  transaction,\n  showCancellationModal,\n  completed\n}) {\n  const id = transaction.id,\n        timestamp = transaction.timestamp,\n        amount = transaction.amount,\n        counterparty = transaction.counterparty,\n        direction = transaction.direction,\n        fees = transaction.fees,\n        presentBalance = transaction.presentBalance,\n        notes = transaction.notes; // console.log('transaction object : ', transaction)\n\n  return React.createElement(\"tr\", {\n    key: id,\n    \"data-testid\": \"transactions-table-row\",\n    className: _getClassName(cx('table-content-row', {\n      'pending-transaction': !completed\n    }), _styleModuleImportMap),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    className: \"TransactionHistory-module__completed-tx-col___1uUw5 TransactionHistory-module__table-content___1BDrm\",\n    \"data-testid\": \"cell-date-time\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, formatDateTime(timestamp).date, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }), formatDateTime(timestamp).time), React.createElement(\"td\", {\n    className: \"TransactionHistory-module__completed-tx-col___1uUw5 TransactionHistory-module__table-content___1BDrm TransactionHistory-module__align-left___WWW01\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    \"data-testid\": \"cell-counterparty\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, makeDisplayName(counterparty).toUpperCase()), React.createElement(\"p\", {\n    className: \"TransactionHistory-module__italic___2AkuJ\",\n    \"data-testid\": \"cell-notes\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, notes || 'none')), React.createElement(\"td\", {\n    \"data-testid\": \"cell-fees\",\n    className: _getClassName(cx('completed-tx-col table-content', {\n      'red-text': fees !== 0\n    }), _styleModuleImportMap),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, fees), React.createElement(\"td\", {\n    \"data-testid\": \"cell-amount\",\n    className: _getClassName(cx('completed-tx-col table-content', {\n      'red-text': direction === 'outgoing'\n    }, {\n      'green-text': direction === 'incoming'\n    }), _styleModuleImportMap),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, amount), completed ? React.createElement(\"td\", {\n    className: \"TransactionHistory-module__completed-tx-col___1uUw5 TransactionHistory-module__table-content___1BDrm\",\n    \"data-testid\": \"cell-present-balance\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, \"*Awaiting DNA update*\"), presentBalance) : React.createElement(\"td\", {\n    className: \"TransactionHistory-module__completed-tx-col___1uUw5 TransactionHistory-module__table-content___1BDrm\",\n    \"data-testid\": \"cell-pending-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"TransactionHistory-module__italic___2AkuJ\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, \"Pending\"), React.createElement(CancelButton, {\n    transaction: transaction,\n    showCancellationModal: showCancellationModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  })));\n}\n\nfunction CancelButton({\n  showCancellationModal,\n  transaction\n}) {\n  return React.createElement(Button, {\n    onClick: () => showCancellationModal(transaction),\n    className: \"TransactionHistory-module__cancel-button___3QSEg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, \"Cancel\");\n} //\n// NOTE: Check to see if/agree as to whether we can abstract out the below modal component\n\n\nfunction ConfirmCancellationModal({\n  transaction,\n  handleClose,\n  cancelTransaction\n}) {\n  if (!transaction) return null;\n  const id = transaction.id,\n        counterparty = transaction.counterparty,\n        amount = transaction.amount,\n        type = transaction.type,\n        direction = transaction.direction;\n\n  const onYes = () => {\n    cancelTransaction(id);\n    handleClose();\n  };\n\n  return React.createElement(Modal, {\n    contentLabel: \"Cancel \".concat(type, \"?\"),\n    isOpen: !!transaction,\n    handleClose: handleClose,\n    className: \"TransactionHistory-module__modal___2UkRO\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"TransactionHistory-module__modal-title___17u91\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, \"Are you sure?\"), React.createElement(\"div\", {\n    className: \"TransactionHistory-module__modal-text___2uREr\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, \"Cancel your \", type, \" \", direction === 'incoming' ? 'for' : 'of', \" \", React.createElement(\"span\", {\n    className: \"TransactionHistory-module__modal-amount___1Eb2f\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, Number(amount).toLocaleString(), \" HF\"), \" \", direction === 'incoming' ? 'from' : 'to', \" \", React.createElement(\"span\", {\n    className: \"TransactionHistory-module__modal-counterparty___2tE36\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, makeDisplayName(counterparty)), \"?\"), React.createElement(\"div\", {\n    className: \"TransactionHistory-module__modal-buttons___3p_gg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: handleClose,\n    className: \"TransactionHistory-module__modal-button-no___2O3w3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, \"No\"), React.createElement(Button, {\n    onClick: onYes,\n    className: \"TransactionHistory-module__modal-button-yes___2lfzj\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, \"Yes\")));\n}","map":{"version":3,"sources":["/home/lisa/Documents/gitrepos/holochain/holo/happyTeam/hp-admin/hp-admin/src/pages/holofuel/TransactionHistory/TransactionHistory.js"],"names":["React","useState","moment","cx","useQuery","useMutation","isEmpty","Header","Button","Modal","capitalizeFirstLetter","string","charAt","toUpperCase","slice","makeDisplayName","agentHash","substring","length","formatDateTime","isoDate","dateDifference","fromNow","split","parseInt","date","format","time","startOf","useCancel","HolofuelCancelMutation","cancel","id","variables","transactionId","refetchQueries","query","HolofuelCompletedTransactionsQuery","HolofuelWaitingTransactionsQuery","TransactionsHistory","history","push","HolofuelUserQuery","data","holofuelUser","whoami","holofuelCompletedTransactions","completedTransactions","holofuelWaitingTransactions","pendingTransactions","console","log","cancelTransaction","modalTransaction","setModalTransaction","showCancellationModal","transaction","headings","map","header","contentIndex","pendingTx","completeTx","TransactionTableHeading","content","toLowerCase","LedgerTransactionsTable","completed","timestamp","amount","counterparty","direction","fees","presentBalance","notes","CancelButton","ConfirmCancellationModal","handleClose","type","onYes","Number","toLocaleString"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport moment from 'moment'\nimport cx from 'classnames'\nimport { useQuery, useMutation } from '@apollo/react-hooks'\nimport { isEmpty } from 'lodash/fp'\nimport './TransactionHistory.module.css'\nimport Header from 'components/holofuel/Header'\nimport Button from 'components/holofuel/Button'\nimport Modal from 'components/holofuel/Modal'\n\nimport HolofuelUserQuery from 'graphql/HolofuelUserQuery.gql'\nimport HolofuelCompletedTransactionsQuery from 'graphql/HolofuelCompletedTransactionsQuery.gql'\nimport HolofuelWaitingTransactionsQuery from 'graphql/HolofuelWaitingTransactionsQuery.gql'\nimport HolofuelCancelMutation from 'graphql/HolofuelCancelMutation.gql'\n\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1)\nexport const makeDisplayName = agentHash => agentHash.substring(agentHash.length - 7) || ''\n\nexport function formatDateTime (isoDate) {\n  const dateDifference = moment(isoDate).fromNow()\n  // If over a year ago, include the year in date\n  if (dateDifference.split(' ')[1] === 'days' && parseInt(dateDifference.split(' ')[0]) > 365) {\n    return {\n      date: moment(isoDate).format('MMMM D YYYY'),\n      time: moment(isoDate).format('h:mm')\n    }\n  // If over a week ago, include the month and day in date\n  } else if (dateDifference.split(' ')[1] === 'days' && parseInt(dateDifference.split(' ')[0]) >= 7) {\n    return {\n      date: moment(isoDate).format('MMMM D'),\n      time: moment(isoDate).format('h:mm')\n    }\n  // If within a week ago, state days lapsed in date\n  } else if (dateDifference.split(' ')[1] === 'days' && parseInt(dateDifference.split(' ')[0]) >= 1) {\n    return {\n      date: dateDifference,\n      time: moment(isoDate).format('h:mm')\n    }\n  // If less than a day ago, state hours lapsed in time\n  } else if (dateDifference.split(' ')[1] === 'hours' && parseInt(moment(isoDate).startOf('hour').fromNow().split(' ')[0]) > 1) {\n    return {\n      date: 'Today',\n      time: moment(isoDate).fromNow() // .startOf('hour')\n    }\n  } else {\n  // If less than an hour ago, state minutes lapsed in time\n    return {\n      date: 'Today',\n      time: moment(isoDate).fromNow() // .startOf('minute')\n    }\n  }\n}\n\nfunction useCancel () {\n  const [cancel] = useMutation(HolofuelCancelMutation)\n  return (id) => cancel({\n    variables: { transactionId: id },\n    refetchQueries: [{\n      query: HolofuelCompletedTransactionsQuery\n    }, {\n      query: HolofuelWaitingTransactionsQuery\n    }]\n  })\n}\n\nexport default function TransactionsHistory ({ history: { push } }) {\n  const { data: { holofuelUser: whoami = {} } } = useQuery(HolofuelUserQuery)\n  const { data: { holofuelCompletedTransactions: completedTransactions = [] } } = useQuery(HolofuelCompletedTransactionsQuery)\n  const { data: { holofuelWaitingTransactions: pendingTransactions = [] } } = useQuery(HolofuelWaitingTransactionsQuery)\n\n  console.log('current Agent : ', whoami)\n\n  const cancelTransaction = useCancel()\n  const [modalTransaction, setModalTransaction] = useState()\n\n  const showCancellationModal = transaction => setModalTransaction(transaction)\n\n  // NOTE: Column Header Titles (or null) => This provides a space fore easy updating of headers, should we decide to rename or substitute a null header with a title.\n  const headings = [\n    null,\n    null,\n    'Fees',\n    'Amount',\n    null\n  ]\n\n  return <React.Fragment>\n    <Header title='HoloFuel' accountNumber='AC1903F8EAAC1903F8EA' />\n\n    <section styleName='account-ledger-table'>\n      <h2 styleName='completed-transactions-title'>History</h2>\n      <table styleName='completed-transactions-table'>\n        <thead>\n          <tr key='heading'>\n            {headings && headings.map((header, contentIndex) => {\n              return (\n                <TransactionTableHeading\n                  key={`heading-${contentIndex}`}\n                  content={header}\n                />\n              )\n            })}\n          </tr>\n        </thead>\n        <tbody>\n          {!isEmpty(pendingTransactions) && pendingTransactions.map(pendingTx => {\n            return <LedgerTransactionsTable\n              transaction={pendingTx}\n              key={pendingTx.id}\n              showCancellationModal={showCancellationModal}\n            />\n          })}\n\n          {!isEmpty(completedTransactions) && completedTransactions.map(completeTx => {\n            return <LedgerTransactionsTable\n              transaction={completeTx}\n              key={completeTx.id}\n              showCancellationModal={showCancellationModal}\n              completed />\n          })}\n        </tbody>\n      </table>\n    </section>\n\n    <ConfirmCancellationModal\n      handleClose={() => setModalTransaction(null)}\n      transaction={modalTransaction}\n      cancelTransaction={cancelTransaction} />\n\n  </React.Fragment>\n}\n\nconst TransactionTableHeading = ({ content }) => {\n  return <th id={content ? content.toLowerCase() : null} styleName='completed-tx-col table-headers'>\n    {content || null}\n  </th>\n}\n\nexport function LedgerTransactionsTable ({ transaction, showCancellationModal, completed }) {\n  const { id, timestamp, amount, counterparty, direction, fees, presentBalance, notes } = transaction\n  // console.log('transaction object : ', transaction)\n  return <tr key={id} styleName={cx('table-content-row', { 'pending-transaction': !completed })} data-testid='transactions-table-row'>\n    <td styleName='completed-tx-col table-content' data-testid='cell-date-time'>{formatDateTime(timestamp).date}<br />{formatDateTime(timestamp).time}</td>\n    <td styleName='completed-tx-col table-content align-left'>\n      <h4 data-testid='cell-counterparty'>{makeDisplayName(counterparty).toUpperCase()}</h4>\n      <p styleName='italic' data-testid='cell-notes'>{notes || 'none'}</p>\n    </td>\n    <td styleName={cx('completed-tx-col table-content', { 'red-text': fees !== 0 })} data-testid='cell-fees'>{fees}</td>\n    <td styleName={cx('completed-tx-col table-content', { 'red-text': direction === 'outgoing' }, { 'green-text': direction === 'incoming' })} data-testid='cell-amount'>{amount}</td>\n    { completed\n      ? <td styleName='completed-tx-col table-content' data-testid='cell-present-balance'><p>*Awaiting DNA update*</p>{presentBalance}</td>\n      : <td styleName='completed-tx-col table-content' data-testid='cell-pending-item'>\n        <p styleName='italic'>Pending</p>\n        <CancelButton transaction={transaction} showCancellationModal={showCancellationModal} />\n      </td>\n    }\n  </tr>\n}\n\nfunction CancelButton ({ showCancellationModal, transaction }) {\n  return <Button\n    onClick={() => showCancellationModal(transaction)}\n    styleName='cancel-button'>\n    Cancel\n  </Button>\n}\n\n//\n// NOTE: Check to see if/agree as to whether we can abstract out the below modal component\nfunction ConfirmCancellationModal ({ transaction, handleClose, cancelTransaction }) {\n  if (!transaction) return null\n\n  const { id, counterparty, amount, type, direction } = transaction\n  const onYes = () => {\n    cancelTransaction(id)\n    handleClose()\n  }\n\n  return <Modal\n    contentLabel={`Cancel ${type}?`}\n    isOpen={!!transaction}\n    handleClose={handleClose}\n    styleName='modal'>\n    <div styleName='modal-title'>Are you sure?</div>\n    <div styleName='modal-text'>\n      Cancel your {type} {direction === 'incoming' ? 'for' : 'of'} <span styleName='modal-amount'>{Number(amount).toLocaleString()} HF</span> {direction === 'incoming' ? 'from' : 'to'} <span styleName='modal-counterparty'>{makeDisplayName(counterparty)}</span>?\n    </div>\n    <div styleName='modal-buttons'>\n      <Button\n        onClick={handleClose}\n        styleName='modal-button-no'>\n        No\n      </Button>\n      <Button\n        onClick={onYes}\n        styleName='modal-button-yes'>\n        Yes\n      </Button>\n    </div>\n  </Modal>\n}\n"]},"metadata":{},"sourceType":"module"}