{"ast":null,"code":"var compoundSubject = require('compound-subject');\n\nvar isEmpty = require('101/is-empty');\n\nvar isString = require('101/is-string');\n\nvar isFunction = require('101/is-function');\n\nvar assertType = require('./assert-type');\n\nvar isClass = require('./is-class.js');\n\nvar validate = require('./validate.js');\n\nvar startsWithVowel = require('./starts-with-vowel.js');\n\nmodule.exports = multiValidate;\n/**\n * validate an argument against multiple validators\n * @param  {string} key argument name\n * @param  {*} arg  argument value\n * @param  {array} validators array of validators\n */\n\nfunction multiValidate(key, arg, validators) {\n  var errMessage = '\"' + key + '\" must be ';\n  assertType(!isEmpty(validators), '\"validators\" cannot be empty');\n  var typeArr = validators.map(function (validator) {\n    if (isString(validator)) {\n      return validator;\n    } else if (isClass(validator)) {\n      return '\"' + validator.name + '\"';\n    } else if (isFunction(validator)) {\n      return 'pass \"' + (validator.name || 'anonymous') + '\"';\n    } else {\n      throw new TypeError('\"validators\" must be an array containing only strings, classes, or functions');\n    }\n  });\n  var typeStr = compoundSubject(typeArr).endWith('or').make();\n  var article = startsWithVowel(typeStr) ? 'an' : 'a';\n  errMessage += article + ' ' + typeStr;\n  var passedAnyValidator = validators.some(function (validator) {\n    try {\n      validate(key, arg, validator);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  });\n\n  if (!passedAnyValidator) {\n    throw new TypeError(errMessage);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}