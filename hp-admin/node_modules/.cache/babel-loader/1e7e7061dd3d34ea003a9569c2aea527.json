{"ast":null,"code":"import _defineProperty from \"/home/lisa/Documents/gitrepos/holochain/holo/happyTeam/hp-admin/hp-admin/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport happStore from \"./happStore\";\nimport hha from \"./hha\";\nimport holofuel from \"./holofuel\"; // data is a tree organized by instanceId > zome > function\n// leaves can either be an object, or a function which is called with the zome call args.\n// DON'T use this function to update the tree, just to construct return values.\n\nconst data = {\n  hylo: {\n    people: {\n      get_me: {\n        address: 'fdkljsklj',\n        name: 'H.P. Owner',\n        avatar_url: 'myface.png'\n      },\n      is_registered: true,\n      register_user: args => _objectSpread({}, data.hylo.people.get_me, {}, args)\n    }\n  },\n  'happ-store': happStore,\n  hha,\n  holofuel\n};\nexport default data;","map":{"version":3,"sources":["/home/lisa/Documents/gitrepos/holochain/holo/happyTeam/hp-admin/hp-admin/src/mock-dnas/mockData.js"],"names":["happStore","hha","holofuel","data","hylo","people","get_me","address","name","avatar_url","is_registered","register_user","args"],"mappings":";;;;;;AAAA,OAAOA,SAAP;AACA,OAAOC,GAAP;AACA,OAAOC,QAAP,mB,CAEA;AACA;AACA;;AAEA,MAAMC,IAAI,GAAG;AACXC,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAE;AACNC,MAAAA,MAAM,EAAE;AACNC,QAAAA,OAAO,EAAE,WADH;AAENC,QAAAA,IAAI,EAAE,YAFA;AAGNC,QAAAA,UAAU,EAAE;AAHN,OADF;AAMNC,MAAAA,aAAa,EAAE,IANT;AAONC,MAAAA,aAAa,EAAEC,IAAI,sBACdT,IAAI,CAACC,IAAL,CAAUC,MAAV,CAAiBC,MADH,MAEdM,IAFc;AAPb;AADJ,GADK;AAeX,gBAAcZ,SAfH;AAgBXC,EAAAA,GAhBW;AAiBXC,EAAAA;AAjBW,CAAb;AAoBA,eAAeC,IAAf","sourcesContent":["import happStore from './happStore'\nimport hha from './hha'\nimport holofuel from './holofuel'\n\n// data is a tree organized by instanceId > zome > function\n// leaves can either be an object, or a function which is called with the zome call args.\n// DON'T use this function to update the tree, just to construct return values.\n\nconst data = {\n  hylo: {\n    people: {\n      get_me: {\n        address: 'fdkljsklj',\n        name: 'H.P. Owner',\n        avatar_url: 'myface.png'\n      },\n      is_registered: true,\n      register_user: args => ({\n        ...data.hylo.people.get_me,\n        ...args\n      })\n    }\n  },\n  'happ-store': happStore,\n  hha,\n  holofuel\n}\n\nexport default data\n"]},"metadata":{},"sourceType":"module"}