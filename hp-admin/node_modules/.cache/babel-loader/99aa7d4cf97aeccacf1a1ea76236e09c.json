{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = renderIcon;\n\nvar _utils = require(\"./utils\");\n\nfunction createImageData(size) {\n  var width = size; // Only support square icons for now\n\n  var height = size;\n  var dataWidth = Math.ceil(width / 2);\n  var mirrorWidth = width - dataWidth;\n  var data = [];\n\n  for (var y = 0; y < height; y++) {\n    var row = [];\n\n    for (var x = 0; x < dataWidth; x++) {\n      // this makes foreground and background color to have a 43% (1/2.3) probability\n      // spot color has 13% chance\n      row[x] = Math.floor((0, _utils.rand)() * 2.3);\n    }\n\n    var r = row.slice(0, mirrorWidth);\n    r.reverse();\n    row = row.concat(r);\n\n    for (var i = 0; i < row.length; i++) {\n      data.push(row[i]);\n    }\n  }\n\n  return data;\n}\n\nfunction buildOpts(opts) {\n  var newOpts = {};\n  newOpts.seed = opts.seed || Math.floor(Math.random() * Math.pow(10, 16)).toString(16);\n  (0, _utils.seedrand)(newOpts.seed);\n\n  if (opts.size && opts.gridSize && opts.scale) {\n    throw new Error(\"Don't specify size, gridSize *and* scale. Choose two.\");\n  }\n\n  newOpts.gridSize = opts.gridSize || opts.size / opts.scale || 8;\n  newOpts.scale = opts.scale || opts.size / opts.gridSize || 4;\n  newOpts.size = opts.size || newOpts.gridSize * newOpts.scale;\n  newOpts.color = opts.color || (0, _utils.encodeColor)((0, _utils.createColor)());\n  newOpts.bgcolor = opts.bgcolor || (0, _utils.encodeColor)((0, _utils.createColor)());\n  newOpts.spotcolor = opts.spotcolor || (0, _utils.encodeColor)((0, _utils.createColor)());\n  return newOpts;\n}\n\nfunction renderIcon(opts, canvas) {\n  var _buildOpts = buildOpts(opts || {}),\n      gridSize = _buildOpts.gridSize,\n      size = _buildOpts.size,\n      scale = _buildOpts.scale,\n      color = _buildOpts.color,\n      spotcolor = _buildOpts.spotcolor,\n      bgcolor = _buildOpts.bgcolor;\n\n  var imageData = createImageData(gridSize);\n  var width = Math.sqrt(imageData.length);\n  canvas.width = canvas.height = size;\n  var cc = canvas.getContext('2d');\n  cc.fillStyle = bgcolor;\n  cc.fillRect(0, 0, canvas.width, canvas.height);\n  cc.fillStyle = color;\n\n  for (var i = 0; i < imageData.length; i++) {\n    // if data is 0, leave the background\n    if (imageData[i]) {\n      var row = Math.floor(i / width);\n      var col = i % width; // if data is 2, choose spot color, if 1 choose foreground\n\n      cc.fillStyle = imageData[i] === 1 ? color : spotcolor;\n      cc.fillRect(col * scale, row * scale, scale, scale);\n    }\n  }\n\n  return canvas;\n}","map":null,"metadata":{},"sourceType":"script"}