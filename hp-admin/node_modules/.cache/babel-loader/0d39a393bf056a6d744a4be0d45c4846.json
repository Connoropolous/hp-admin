{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _optionsDefaults = _interopRequireDefault(require(\"./schemas/optionsDefaults\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar isNamespacedStyleName = function isNamespacedStyleName(styleName) {\n  return styleName.indexOf('.') !== -1;\n};\n\nvar handleError = function handleError(message, handleMissingStyleName) {\n  if (handleMissingStyleName === 'throw') {\n    throw new Error(message);\n  } else if (handleMissingStyleName === 'warn') {\n    // eslint-disable-next-line no-console\n    console.warn(message);\n  }\n\n  return null;\n};\n\nvar getClassNameForNamespacedStyleName = function getClassNameForNamespacedStyleName(styleName, styleModuleImportMap, handleMissingStyleNameOption) {\n  // Note:\n  // Do not use the desctructing syntax with Babel.\n  // Desctructing adds _slicedToArray helper.\n  var styleNameParts = styleName.split('.');\n  var importName = styleNameParts[0];\n  var moduleName = styleNameParts[1];\n  var handleMissingStyleName = handleMissingStyleNameOption || _optionsDefaults[\"default\"].handleMissingStyleName;\n\n  if (!moduleName) {\n    return handleError('Invalid style name: ' + styleName, handleMissingStyleName);\n  }\n\n  if (!styleModuleImportMap[importName]) {\n    return handleError('CSS module import does not exist: ' + importName, handleMissingStyleName);\n  }\n\n  if (!styleModuleImportMap[importName][moduleName]) {\n    return handleError('CSS module does not exist: ' + moduleName, handleMissingStyleName);\n  }\n\n  return styleModuleImportMap[importName][moduleName];\n};\n\nvar getClassNameFromMultipleImports = function getClassNameFromMultipleImports(styleName, styleModuleImportMap, handleMissingStyleNameOption) {\n  var handleMissingStyleName = handleMissingStyleNameOption || _optionsDefaults[\"default\"].handleMissingStyleName;\n  var importKeysWithMatches = Object.keys(styleModuleImportMap).map(function (importKey) {\n    return styleModuleImportMap[importKey][styleName] && importKey;\n  }).filter(function (importKey) {\n    return importKey;\n  });\n\n  if (importKeysWithMatches.length > 1) {\n    throw new Error('Cannot resolve styleName \"' + styleName + '\" because it is present in multiple imports:' + '\\n\\n\\t' + importKeysWithMatches.join('\\n\\t') + '\\n\\nYou can resolve this by using a named import, e.g:' + '\\n\\n\\timport foo from \"' + importKeysWithMatches[0] + '\";' + '\\n\\t<div styleName=\"foo.' + styleName + '\" />' + '\\n\\n');\n  }\n\n  if (importKeysWithMatches.length === 0) {\n    return handleError('Could not resolve the styleName \\'' + styleName + '\\'.', handleMissingStyleName);\n  }\n\n  return styleModuleImportMap[importKeysWithMatches[0]][styleName];\n};\n\nvar _default = function _default(styleNameValue, styleModuleImportMap, options) {\n  var styleModuleImportMapKeys = Object.keys(styleModuleImportMap);\n\n  var _ref = options || {},\n      _ref$handleMissingSty = _ref.handleMissingStyleName,\n      handleMissingStyleName = _ref$handleMissingSty === void 0 ? _optionsDefaults[\"default\"].handleMissingStyleName : _ref$handleMissingSty,\n      _ref$autoResolveMulti = _ref.autoResolveMultipleImports,\n      autoResolveMultipleImports = _ref$autoResolveMulti === void 0 ? _optionsDefaults[\"default\"].autoResolveMultipleImports : _ref$autoResolveMulti;\n\n  if (!styleNameValue) {\n    return '';\n  }\n\n  return styleNameValue.split(' ').filter(function (styleName) {\n    return styleName;\n  }).map(function (styleName) {\n    if (isNamespacedStyleName(styleName)) {\n      return getClassNameForNamespacedStyleName(styleName, styleModuleImportMap, handleMissingStyleName);\n    }\n\n    if (styleModuleImportMapKeys.length === 0) {\n      throw new Error('Cannot use styleName attribute for style name \\'' + styleName + '\\' without importing at least one stylesheet.');\n    }\n\n    if (styleModuleImportMapKeys.length > 1) {\n      if (!autoResolveMultipleImports) {\n        throw new Error('Cannot use anonymous style name \\'' + styleName + '\\' with more than one stylesheet import without setting \\'autoResolveMultipleImports\\' to true.');\n      }\n\n      return getClassNameFromMultipleImports(styleName, styleModuleImportMap, handleMissingStyleName);\n    }\n\n    var styleModuleMap = styleModuleImportMap[styleModuleImportMapKeys[0]];\n\n    if (!styleModuleMap[styleName]) {\n      return handleError('Could not resolve the styleName \\'' + styleName + '\\'.', handleMissingStyleName);\n    }\n\n    return styleModuleMap[styleName];\n  }).filter(function (className) {\n    // Remove any styles which could not be found (if handleMissingStyleName === 'ignore')\n    return className;\n  }).join(' ');\n};\n\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}