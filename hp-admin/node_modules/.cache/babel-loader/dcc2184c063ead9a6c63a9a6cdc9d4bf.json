{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar _this = this;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar rpc_websockets_1 = require(\"rpc-websockets\");\n\nrequire('isomorphic-fetch');\n\nvar CONDUCTOR_CONFIG = '/_dna_connections.json';\nvar DEFAULT_TIMEOUT = 5000;\n/**\n * Establish a websocket connection to a Conductor interface\n * Accepts an object of options:\n *   - url (optional): Specifies the URL to establish the connection with\n *   - wsClient (optional): Object of options that gets passed through as configuration to the rpc-websockets client\n *   - timeout (optional): If the socket is not ready, `call` and `callZome` will wait this many milliseconds for the\n *       socket to be ready before timing out and rejecting the promise. Defaults to 5 seconds, but if you set it\n *       to 0 or null, it will never timeout.\n */\n\nexports.connect = function (opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  return new Promise(function (fulfill, reject) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var url, _a, timeout, ws;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = opts.url;\n            if (_a) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , getUrlFromContainer().catch(function () {\n              return reject('Could not auto-detect DNA interface from conductor. \\\nEnsure the web UI is hosted by a Holochain Conductor or manually specify url as parameter to connect');\n            })];\n\n          case 1:\n            _a = _b.sent();\n            _b.label = 2;\n\n          case 2:\n            url = _a;\n            timeout = opts.timeout || DEFAULT_TIMEOUT;\n            ws = new rpc_websockets_1.Client(url, opts.wsClient);\n            ws.on('open', function () {\n              return 'WS open';\n            });\n            ws.on('close', function () {\n              return 'WS closed';\n            });\n            ws.once('open', function () {\n              var call = function () {\n                var methodSegments = [];\n\n                for (var _i = 0; _i < arguments.length; _i++) {\n                  methodSegments[_i] = arguments[_i];\n                }\n\n                return function (params) {\n                  var method = methodSegments.length === 1 ? methodSegments[0] : methodSegments.join('/');\n                  return callWhenConnected(ws, method, params, opts.timeout);\n                };\n              };\n\n              var callZome = function (instanceId, zome, func) {\n                return function (args) {\n                  var callObject = {\n                    'instance_id': instanceId,\n                    zome: zome,\n                    'function': func,\n                    args: args\n                  };\n                  return callWhenConnected(ws, 'call', callObject, opts.timeout);\n                };\n              };\n\n              var onSignal = function (callback) {\n                // go down to the underlying websocket connection (.socket)\n                // for a simpler API\n                ws.socket.on('message', function (message) {\n                  if (!message) return;\n                  var msg = JSON.parse(message);\n\n                  if (msg.signal) {\n                    callback(msg);\n                  }\n                });\n              }; // define a function which will close the websocket connection\n\n\n              var close = function () {\n                return ws.close();\n              };\n\n              fulfill({\n                call: call,\n                callZome: callZome,\n                close: close,\n                onSignal: onSignal,\n                ws: ws\n              });\n            });\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  });\n};\n\nfunction getUrlFromContainer() {\n  return fetch(CONDUCTOR_CONFIG).then(function (data) {\n    return data.json();\n  }).then(function (json) {\n    return json.dna_interface.driver.port;\n  }).then(function (port) {\n    return \"ws://localhost:\" + port;\n  });\n}\n/**\n * Ensure that a ws client never attempts to call when the socket is not ready\n * Instead, return a promise that resolves only when the socket is connected and the call is made\n */\n\n\nfunction callWhenConnected(ws, method, payload, timeout) {\n  if (timeout === void 0) {\n    timeout = null;\n  }\n\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      if (ws.ready) {\n        return [2\n        /*return*/\n        , Promise.resolve(ws.call(method, payload))];\n      } else {\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          var timer = timeout ? setTimeout(function () {\n            reject(\"Timeout while waiting for ws to connect. method: \" + method + \", payload: \" + JSON.stringify(payload));\n          }, timeout) : null;\n          ws.once('open', function () {\n            clearTimeout(timer);\n            ws.call(method, payload).then(resolve).catch(reject);\n          });\n        })];\n      }\n\n      return [2\n      /*return*/\n      ];\n    });\n  });\n}\n\nvar holochainclient = {\n  connect: exports.connect\n};","map":null,"metadata":{},"sourceType":"script"}