{"ast":null,"code":"var debug = require('debug')('assert-args');\n\nvar exists = require('101/exists');\n\nvar isObject = require('101/is-object');\n\nvar not = require('101/not');\n\nvar isOptionalKey = require('./lib/is-optional-key.js');\n\nvar isSpreadKey = require('./lib/is-spread-key.js');\n\nvar validate = require('./lib/validate.js');\n\nvar isRequiredKey = not(isOptionalKey);\nmodule.exports = assertArgs;\n\nfunction assertArgs(args, validation) {\n  if (typeof args !== 'object' || !exists(args.length)) {\n    throw new TypeError('\"args\" must be an array or array-like object (arguments)');\n  }\n\n  if (!isObject(validation)) {\n    // strict object\n    throw new TypeError('\"validation\" must be an object');\n  } // copy args\n\n\n  var argsLeft = Array.prototype.slice.call(args);\n  var firstOptionalErr;\n  var ret = {};\n  var argKeys = Object.keys(validation);\n  var outKey;\n\n  if (argKeys.filter(isSpreadKey).length > 1) {\n    throw new Error('assert-args only supports a single spread argument');\n  }\n\n  argKeys.forEach(function (key, i) {\n    var spreadArgs;\n    var validator = validation[key];\n    var arg = argsLeft[0];\n\n    if (isSpreadKey(key)) {\n      debug('is spread key: ' + key);\n      debug('argKeys.length', argKeys.length);\n      debug('argsLeft.length', argsLeft.length);\n      var requiredKeysLeft = argKeys.slice(i + 1).filter(isRequiredKey);\n      debug('requiredKeysLeft', requiredKeysLeft);\n      spreadArgs = argsLeft.slice(0, argsLeft.length - requiredKeysLeft.length); // copy\n\n      debug('spreadArgs', spreadArgs);\n      debug('spreadArgs.length', spreadArgs.length);\n\n      if (isOptionalKey(key)) {\n        debug('is optional spread key: ' + key);\n        outKey = key.slice(4, -1);\n        ret[outKey] = [];\n        spreadArgs.forEach(function (arg) {\n          if (!exists(arg)) {\n            // non-existant args pass as optional args\n            firstOptionalErr = null; // reset after a pass\n\n            argsLeft.shift(); // pass, remains [...]\n\n            return;\n          }\n\n          try {\n            validate(key.slice(1, -1), arg, validator, true); // optional arg passes validator\n\n            firstOptionalErr = null;\n            ret[outKey].push(arg); // pass\n\n            argsLeft.shift();\n          } catch (err) {\n            debug('spread validate err: ' + err.message);\n            debug('spread validate argsLeft: ' + argsLeft);\n\n            if (firstOptionalErr) {\n              // other optional error already occurred, throw first.\n              throw firstOptionalErr;\n            } else {\n              firstOptionalErr = err;\n            }\n          }\n        });\n      } else {\n        // isSpreadKey && isRequiredKey\n        debug('is required spread key: ' + key);\n        outKey = key.slice(3);\n        ret[outKey] = [];\n\n        if (spreadArgs.length === 0) {\n          // missing trailing required arg, fail\n          throw new TypeError('\"' + key + '\" is required');\n        }\n\n        spreadArgs.forEach(function (arg) {\n          try {\n            validate(key, arg, validator, true); // optional arg passes validator\n\n            firstOptionalErr = null;\n            ret[outKey].push(arg); // pass\n\n            argsLeft.shift();\n          } catch (err) {\n            debug('spread validate err: ' + err.message);\n            debug('spread validate argsLeft: ' + argsLeft);\n            debug('spread validate argKeys: ' + argKeys);\n\n            if (i === argKeys.length - 1) {\n              // spread is last arg.\n              // spread assumes all args passed are used.\n              // there are no args left. and this failed for spread. throw it.\n              if (firstOptionalErr) {\n                if (argsLeft.length - 1 > requiredKeysLeft.length) {\n                  throw firstOptionalErr;\n                } else {\n                  throw err;\n                }\n              } else {\n                throw err;\n              }\n            } else {\n              // leading/middle spread arg\n              if (firstOptionalErr) {\n                // other optional error already occurred, throw first.\n                throw firstOptionalErr;\n              } else {\n                // set optional err\n                firstOptionalErr = err;\n              }\n            }\n          }\n        });\n      }\n\n      return;\n    } else if (isOptionalKey(key)) {\n      debug('is optional key: ' + key);\n      key = key.slice(1, -1);\n\n      if (argsLeft.length === 0) {\n        // missing trailing optional arg, pass\n        ret[key] = undefined;\n        return;\n      } else if (!exists(arg)) {\n        // non-existant args pass as optional args\n        firstOptionalErr = null;\n        ret[key] = argsLeft.shift(); // pass\n\n        return;\n      }\n\n      try {\n        validate(key, arg, validator); // optional arg passes validator\n\n        firstOptionalErr = null;\n        ret[key] = argsLeft.shift();\n        return;\n      } catch (err) {\n        // optional arg failed validator\n        // * set as undefined and pass for now\n        // * save the error in case there are no more required args\n        firstOptionalErr = firstOptionalErr || err;\n        ret[key] = undefined;\n        return;\n      }\n    } else {\n      // isRequiredKey\n      debug('is required key: ' + key);\n\n      if (argsLeft.length === 0) {\n        // missing trailing required arg, fail\n        throw new TypeError('\"' + key + '\" is required');\n      }\n\n      try {\n        validate(key, arg, validator); // required arg passes validator, pass\n\n        firstOptionalErr = null;\n        ret[key] = argsLeft.shift();\n      } catch (err) {\n        if (firstOptionalErr && argsLeft.length > 1) {\n          // optional err was thrown before and this is not the last arg\n          throw firstOptionalErr;\n        }\n\n        throw err;\n      }\n\n      return;\n    }\n  });\n\n  if (firstOptionalErr) {\n    throw firstOptionalErr;\n  }\n\n  return ret;\n}","map":null,"metadata":{},"sourceType":"script"}