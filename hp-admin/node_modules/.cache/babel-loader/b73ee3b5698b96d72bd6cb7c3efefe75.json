{"ast":null,"code":"import { graphql } from '@apollo/react-hoc';\nimport { flow as compose } from 'lodash';\nvar HostingUserQuery = { kind: \"Document\", definitions: [{ kind: \"OperationDefinition\", operation: \"query\", name: { kind: \"Name\", value: \"HostingUser\" }, variableDefinitions: [], directives: [], selectionSet: { kind: \"SelectionSet\", selections: [{ kind: \"Field\", name: { kind: \"Name\", value: \"hostingUser\" }, arguments: [], directives: [], selectionSet: { kind: \"SelectionSet\", selections: [{ kind: \"Field\", name: { kind: \"Name\", value: \"id\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"isRegistered\" }, arguments: [], directives: [] }] } }] } }], loc: { start: 0, end: 66, source: { body: \"query HostingUser {\\n  hostingUser {\\n    id\\n    isRegistered\\n  }\\n}\\n\", name: \"GraphQL request\", locationOffset: { line: 1, column: 1 } } } };\nvar RegisterHostingUserMutation = { kind: \"Document\", definitions: [{ kind: \"OperationDefinition\", operation: \"mutation\", name: { kind: \"Name\", value: \"RegisterHostingUser\" }, variableDefinitions: [], directives: [], selectionSet: { kind: \"SelectionSet\", selections: [{ kind: \"Field\", name: { kind: \"Name\", value: \"registerHostingUser\" }, arguments: [], directives: [], selectionSet: { kind: \"SelectionSet\", selections: [{ kind: \"Field\", name: { kind: \"Name\", value: \"id\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"isRegistered\" }, arguments: [], directives: [] }] } }] } }], loc: { start: 0, end: 85, source: { body: \"mutation RegisterHostingUser {\\n  registerHostingUser {\\n    id\\n    isRegistered\\n  }\\n}\\n\", name: \"GraphQL request\", locationOffset: { line: 1, column: 1 } } } };\nconst hostingUser = graphql(HostingUserQuery, {\n  props: ({\n    data: {\n      hostingUser\n    }\n  }) => ({\n    hostingUser\n  })\n});\nconst registerHostingUser = graphql(RegisterHostingUserMutation, {\n  props: ({\n    mutate,\n    result: {\n      loading,\n      called\n    }\n  }) => ({\n    registerHostingUser: () => mutate({\n      update: (cache, {\n        data: {\n          registerHostingUser\n        }\n      }) => {\n        if (registerHostingUser) {\n          cache.writeQuery({\n            query: HostingUserQuery,\n            data: {\n              hostingUser: registerHostingUser\n            }\n          });\n        }\n      }\n    }),\n    loading,\n    called\n  })\n});\nexport default compose(registerHostingUser, hostingUser);","map":{"version":3,"sources":["/home/lisa/Documents/gitrepos/holochain/holo/happyTeam/hp-admin/hp-admin/src/components/RegisterUser/RegisterUser.connector.js"],"names":["graphql","flow","compose","hostingUser","HostingUserQuery","props","data","registerHostingUser","RegisterHostingUserMutation","mutate","result","loading","called","update","cache","writeQuery","query"],"mappings":"AAAA,SAASA,OAAT,QAAwB,mBAAxB;AACA,SAASC,IAAI,IAAIC,OAAjB,QAAgC,QAAhC;;;AAIA,MAAMC,WAAW,GAAGH,OAAO,CAACI,gBAAD,EAAmB;AAC5CC,EAAAA,KAAK,EAAE,CAAC;AAAEC,IAAAA,IAAI,EAAE;AAAEH,MAAAA;AAAF;AAAR,GAAD,MAAgC;AAAEA,IAAAA;AAAF,GAAhC;AADqC,CAAnB,CAA3B;AAIA,MAAMI,mBAAmB,GAAGP,OAAO,CAACQ,2BAAD,EAA8B;AAC/DH,EAAAA,KAAK,EAAE,CAAC;AAAEI,IAAAA,MAAF;AAAUC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX;AAAlB,GAAD,MAA8C;AACnDL,IAAAA,mBAAmB,EAAE,MAAME,MAAM,CAAC;AAChCI,MAAAA,MAAM,EAAE,CAACC,KAAD,EAAQ;AAAER,QAAAA,IAAI,EAAE;AAAEC,UAAAA;AAAF;AAAR,OAAR,KAA8C;AACpD,YAAIA,mBAAJ,EAAyB;AACvBO,UAAAA,KAAK,CAACC,UAAN,CAAiB;AACfC,YAAAA,KAAK,EAAEZ,gBADQ;AAEfE,YAAAA,IAAI,EAAE;AACJH,cAAAA,WAAW,EAAEI;AADT;AAFS,WAAjB;AAMD;AACF;AAV+B,KAAD,CADkB;AAanDI,IAAAA,OAbmD;AAcnDC,IAAAA;AAdmD,GAA9C;AADwD,CAA9B,CAAnC;AAmBA,eAAeV,OAAO,CACpBK,mBADoB,EAEpBJ,WAFoB,CAAtB","sourcesContent":["import { graphql } from '@apollo/react-hoc'\nimport { flow as compose } from 'lodash'\nimport HostingUserQuery from 'graphql/HostingUserQuery.gql'\nimport RegisterHostingUserMutation from 'graphql/RegisterHostingUserMutation.gql'\n\nconst hostingUser = graphql(HostingUserQuery, {\n  props: ({ data: { hostingUser } }) => ({ hostingUser })\n})\n\nconst registerHostingUser = graphql(RegisterHostingUserMutation, {\n  props: ({ mutate, result: { loading, called } }) => ({\n    registerHostingUser: () => mutate({\n      update: (cache, { data: { registerHostingUser } }) => {\n        if (registerHostingUser) {\n          cache.writeQuery({\n            query: HostingUserQuery,\n            data: {\n              hostingUser: registerHostingUser\n            }\n          })\n        }\n      }\n    }),\n    loading,\n    called\n  })\n})\n\nexport default compose(\n  registerHostingUser,\n  hostingUser\n)\n"]},"metadata":{},"sourceType":"module"}