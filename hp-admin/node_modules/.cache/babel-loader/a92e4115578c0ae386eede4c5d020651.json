{"ast":null,"code":"import _slicedToArray from \"/home/lisa/Documents/gitrepos/holochain/holo/happyTeam/hp-admin/hp-admin/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/lisa/Documents/gitrepos/holochain/holo/happyTeam/hp-admin/hp-admin/src/pages/ManagePricing/ManagePricing.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport \"./ManagePricing.module.css\";\nimport Header from 'components/Header';\nimport Button from 'components/Button';\nimport { UNITS } from 'models/HostPricing';\nvar HostPricingQuery = { kind: \"Document\", definitions: [{ kind: \"OperationDefinition\", operation: \"query\", name: { kind: \"Name\", value: \"HostPricing\" }, variableDefinitions: [], directives: [], selectionSet: { kind: \"SelectionSet\", selections: [{ kind: \"Field\", name: { kind: \"Name\", value: \"hostPricing\" }, arguments: [], directives: [], selectionSet: { kind: \"SelectionSet\", selections: [{ kind: \"Field\", name: { kind: \"Name\", value: \"units\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"pricePerUnit\" }, arguments: [], directives: [] }] } }] } }], loc: { start: 0, end: 69, source: { body: \"query HostPricing {\\n  hostPricing {\\n    units\\n    pricePerUnit\\n  }\\n}\\n\", name: \"GraphQL request\", locationOffset: { line: 1, column: 1 } } } };\nvar UpdateHostPricingMutation = { kind: \"Document\", definitions: [{ kind: \"OperationDefinition\", operation: \"mutation\", name: { kind: \"Name\", value: \"UpdateHostPricing\" }, variableDefinitions: [{ kind: \"VariableDefinition\", variable: { kind: \"Variable\", name: { kind: \"Name\", value: \"units\" } }, type: { kind: \"NamedType\", name: { kind: \"Name\", value: \"String\" } }, directives: [] }, { kind: \"VariableDefinition\", variable: { kind: \"Variable\", name: { kind: \"Name\", value: \"pricePerUnit\" } }, type: { kind: \"NamedType\", name: { kind: \"Name\", value: \"String\" } }, directives: [] }], directives: [], selectionSet: { kind: \"SelectionSet\", selections: [{ kind: \"Field\", name: { kind: \"Name\", value: \"updateHostPricing\" }, arguments: [{ kind: \"Argument\", name: { kind: \"Name\", value: \"units\" }, value: { kind: \"Variable\", name: { kind: \"Name\", value: \"units\" } } }, { kind: \"Argument\", name: { kind: \"Name\", value: \"pricePerUnit\" }, value: { kind: \"Variable\", name: { kind: \"Name\", value: \"pricePerUnit\" } } }], directives: [], selectionSet: { kind: \"SelectionSet\", selections: [{ kind: \"Field\", name: { kind: \"Name\", value: \"units\" }, arguments: [], directives: [] }, { kind: \"Field\", name: { kind: \"Name\", value: \"pricePerUnit\" }, arguments: [], directives: [] }] } }] } }], loc: { start: 0, end: 168, source: { body: \"mutation UpdateHostPricing ($units: String, $pricePerUnit: String) {\\n  updateHostPricing(units: $units, pricePerUnit: $pricePerUnit) {\\n    units\\n    pricePerUnit\\n  }\\n}\\n\", name: \"GraphQL request\", locationOffset: { line: 1, column: 1 } } } };\nexport default function ManagePricing() {\n  const _useQuery = useQuery(HostPricingQuery),\n        hostPricing = _useQuery.data.hostPricing;\n\n  const _useMutation = useMutation(UpdateHostPricingMutation),\n        _useMutation2 = _slicedToArray(_useMutation, 2),\n        updateHostPricing = _useMutation2[0],\n        loading = _useMutation2[1].loading;\n\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        units = _useState2[0],\n        setUnits = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        pricePerUnit = _useState4[0],\n        setPricePerUnit = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        changed = _useState6[0],\n        setChanged = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        saved = _useState8[0],\n        setSaved = _useState8[1];\n\n  useEffect(() => {\n    if (!hostPricing) return;\n    const units = hostPricing.units,\n          pricePerUnit = hostPricing.pricePerUnit;\n    setUnits(units);\n    setPricePerUnit(pricePerUnit);\n  }, [hostPricing]);\n  const dropdownOptions = [{\n    value: UNITS.cpu,\n    label: \"CPU (MS)\"\n  }, {\n    value: UNITS.bandwidth,\n    label: \"Bandwidth (MB)\"\n  }, {\n    value: UNITS.storage,\n    label: \"Storage (MB)\"\n  }, {\n    value: UNITS.ram,\n    label: \"RAM (MB)\"\n  }];\n\n  const onFuelInputChange = ({\n    target: {\n      value\n    }\n  }) => {\n    setChanged(true);\n    setSaved(false);\n    setPricePerUnit(value);\n  };\n\n  const onUnitsChange = ({\n    target: {\n      value\n    }\n  }) => {\n    setChanged(true);\n    setSaved(false);\n    setUnits(value);\n  };\n\n  const save = () => {\n    setChanged(false);\n    setSaved(true);\n    updateHostPricing({\n      variables: {\n        units,\n        pricePerUnit\n      }\n    });\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(Header, {\n    title: \"Manage Pricing\",\n    backTo: \"/browse-happs\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"ManagePricing-module__inputs___3mwuz\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"number\",\n    value: pricePerUnit,\n    onChange: onFuelInputChange,\n    className: \"ManagePricing-module__price-input___3fbMC\",\n    \"data-testid\": \"price-input\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"ManagePricing-module__connecting-label___2S60I\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"HoloFuel per\"), React.createElement(\"select\", {\n    className: \"ManagePricing-module__units-dropdown___20kak\",\n    value: units,\n    onChange: onUnitsChange,\n    \"data-testid\": \"units-dropdown\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, dropdownOptions.map(({\n    value,\n    label\n  }) => React.createElement(\"option\", {\n    value: value,\n    key: value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, label)))), React.createElement(\"div\", {\n    className: \"ManagePricing-module__save-button-row___2QG8k\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(Button, {\n    className: \"ManagePricing-module__save-button___23RQm\",\n    wide: true,\n    variant: \"primary\",\n    onClick: save,\n    disabled: loading || saved || !changed,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, loading ? 'Saving' : saved ? 'Saved' : 'Save')));\n}","map":{"version":3,"sources":["/home/lisa/Documents/gitrepos/holochain/holo/happyTeam/hp-admin/hp-admin/src/pages/ManagePricing/ManagePricing.js"],"names":["React","useState","useEffect","useQuery","useMutation","Header","Button","UNITS","ManagePricing","HostPricingQuery","hostPricing","data","UpdateHostPricingMutation","updateHostPricing","loading","units","setUnits","pricePerUnit","setPricePerUnit","changed","setChanged","saved","setSaved","dropdownOptions","value","cpu","label","bandwidth","storage","ram","onFuelInputChange","target","onUnitsChange","save","variables","map"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,qBAAtC;AACA;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,KAAT,QAAsB,oBAAtB;;;AAIA,eAAe,SAASC,aAAT,GAA0B;AAAA,oBACLL,QAAQ,CAACM,gBAAD,CADH;AAAA,QACvBC,WADuB,aAC/BC,IAD+B,CACvBD,WADuB;;AAAA,uBAEEN,WAAW,CAACQ,yBAAD,CAFb;AAAA;AAAA,QAEhCC,iBAFgC;AAAA,QAEXC,OAFW,oBAEXA,OAFW;;AAAA,oBAIbb,QAAQ,CAAC,EAAD,CAJK;AAAA;AAAA,QAIhCc,KAJgC;AAAA,QAIzBC,QAJyB;;AAAA,qBAKCf,QAAQ,CAAC,EAAD,CALT;AAAA;AAAA,QAKhCgB,YALgC;AAAA,QAKlBC,eALkB;;AAAA,qBAMTjB,QAAQ,CAAC,KAAD,CANC;AAAA;AAAA,QAMhCkB,OANgC;AAAA,QAMvBC,UANuB;;AAAA,qBAObnB,QAAQ,CAAC,KAAD,CAPK;AAAA;AAAA,QAOhCoB,KAPgC;AAAA,QAOzBC,QAPyB;;AASvCpB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACQ,WAAL,EAAkB;AADJ,UAENK,KAFM,GAEkBL,WAFlB,CAENK,KAFM;AAAA,UAECE,YAFD,GAEkBP,WAFlB,CAECO,YAFD;AAGdD,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACAG,IAAAA,eAAe,CAACD,YAAD,CAAf;AACD,GALQ,EAKN,CAACP,WAAD,CALM,CAAT;AAOA,QAAMa,eAAe,GAAG,CACtB;AAAEC,IAAAA,KAAK,EAAEjB,KAAK,CAACkB,GAAf;AAAoBC,IAAAA,KAAK;AAAzB,GADsB,EAEtB;AAAEF,IAAAA,KAAK,EAAEjB,KAAK,CAACoB,SAAf;AAA0BD,IAAAA,KAAK;AAA/B,GAFsB,EAGtB;AAAEF,IAAAA,KAAK,EAAEjB,KAAK,CAACqB,OAAf;AAAwBF,IAAAA,KAAK;AAA7B,GAHsB,EAItB;AAAEF,IAAAA,KAAK,EAAEjB,KAAK,CAACsB,GAAf;AAAoBH,IAAAA,KAAK;AAAzB,GAJsB,CAAxB;;AAOA,QAAMI,iBAAiB,GAAG,CAAC;AAAEC,IAAAA,MAAM,EAAE;AAAEP,MAAAA;AAAF;AAAV,GAAD,KAA2B;AACnDJ,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAJ,IAAAA,eAAe,CAACM,KAAD,CAAf;AACD,GAJD;;AAMA,QAAMQ,aAAa,GAAG,CAAC;AAAED,IAAAA,MAAM,EAAE;AAAEP,MAAAA;AAAF;AAAV,GAAD,KAA2B;AAC/CJ,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAN,IAAAA,QAAQ,CAACQ,KAAD,CAAR;AACD,GAJD;;AAMA,QAAMS,IAAI,GAAG,MAAM;AACjBb,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAT,IAAAA,iBAAiB,CAAC;AAAEqB,MAAAA,SAAS,EAAE;AAAEnB,QAAAA,KAAF;AAASE,QAAAA;AAAT;AAAb,KAAD,CAAjB;AACD,GAJD;;AAMA,SAAO,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACL,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,gBAAd;AAA+B,IAAA,MAAM,EAAC,eAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,EAGL;AAAK,IAAA,SAAS,EAAC,sCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,KAAK,EAAEA,YAA5B;AAA0C,IAAA,QAAQ,EAAEa,iBAApD;AAAuE,IAAA,SAAS,EAAC,2CAAjF;AAA+F,mBAAY,aAA3G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAM,IAAA,SAAS,EAAC,gDAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,EAGE;AAAQ,IAAA,SAAS,EAAC,8CAAlB;AACE,IAAA,KAAK,EAAEf,KADT;AAEE,IAAA,QAAQ,EAAEiB,aAFZ;AAGE,mBAAY,gBAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGT,eAAe,CAACY,GAAhB,CAAoB,CAAC;AAAEX,IAAAA,KAAF;AAASE,IAAAA;AAAT,GAAD,KACnB;AAAQ,IAAA,KAAK,EAAEF,KAAf;AAAsB,IAAA,GAAG,EAAEA,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,KADH,CADD,CAJH,CAHF,CAHK,EAiBL;AAAK,IAAA,SAAS,EAAC,+CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAC,2CAAlB;AAAgC,IAAA,IAAI,MAApC;AAAqC,IAAA,OAAO,EAAC,SAA7C;AAAuD,IAAA,OAAO,EAAEO,IAAhE;AAAsE,IAAA,QAAQ,EAAEnB,OAAO,IAAIO,KAAX,IAAoB,CAACF,OAArG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,OAAO,GAAG,QAAH,GAAeO,KAAK,GAAG,OAAH,GAAa,MAD3C,CADF,CAjBK,CAAP;AAuBD","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useQuery, useMutation } from '@apollo/react-hooks'\nimport './ManagePricing.module.css'\nimport Header from 'components/Header'\nimport Button from 'components/Button'\nimport { UNITS } from 'models/HostPricing'\nimport HostPricingQuery from 'graphql/HostPricingQuery.gql'\nimport UpdateHostPricingMutation from 'graphql/UpdateHostPricingMutation.gql'\n\nexport default function ManagePricing () {\n  const { data: { hostPricing } } = useQuery(HostPricingQuery)\n  const [updateHostPricing, { loading }] = useMutation(UpdateHostPricingMutation)\n\n  const [units, setUnits] = useState('')\n  const [pricePerUnit, setPricePerUnit] = useState('')\n  const [changed, setChanged] = useState(false)\n  const [saved, setSaved] = useState(false)\n\n  useEffect(() => {\n    if (!hostPricing) return\n    const { units, pricePerUnit } = hostPricing\n    setUnits(units)\n    setPricePerUnit(pricePerUnit)\n  }, [hostPricing])\n\n  const dropdownOptions = [\n    { value: UNITS.cpu, label: `CPU (MS)` },\n    { value: UNITS.bandwidth, label: `Bandwidth (MB)` },\n    { value: UNITS.storage, label: `Storage (MB)` },\n    { value: UNITS.ram, label: `RAM (MB)` }\n  ]\n\n  const onFuelInputChange = ({ target: { value } }) => {\n    setChanged(true)\n    setSaved(false)\n    setPricePerUnit(value)\n  }\n\n  const onUnitsChange = ({ target: { value } }) => {\n    setChanged(true)\n    setSaved(false)\n    setUnits(value)\n  }\n\n  const save = () => {\n    setChanged(false)\n    setSaved(true)\n    updateHostPricing({ variables: { units, pricePerUnit } })\n  }\n\n  return <React.Fragment>\n    <Header title='Manage Pricing' backTo='/browse-happs' />\n\n    <div styleName='inputs'>\n      <input type='number' value={pricePerUnit} onChange={onFuelInputChange} styleName='price-input' data-testid='price-input' />\n      <span styleName='connecting-label'>HoloFuel per</span>\n      <select styleName='units-dropdown'\n        value={units}\n        onChange={onUnitsChange}\n        data-testid='units-dropdown'>\n        {dropdownOptions.map(({ value, label }) =>\n          <option value={value} key={value}>\n            {label}\n          </option>)}\n      </select>\n    </div>\n\n    <div styleName='save-button-row'>\n      <Button styleName='save-button' wide variant='primary' onClick={save} disabled={loading || saved || !changed}>\n        {loading ? 'Saving' : (saved ? 'Saved' : 'Save')}\n      </Button>\n    </div>\n  </React.Fragment>\n}\n"]},"metadata":{},"sourceType":"module"}