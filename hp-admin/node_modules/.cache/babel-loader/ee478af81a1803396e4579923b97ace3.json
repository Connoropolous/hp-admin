{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/lisa/Documents/gitrepos/holochain/holo/happyTeam/hp-admin/hp-admin/node_modules/@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.seedrand = seedrand;\nexports.rand = rand;\nexports.createColor = createColor;\nexports.mixColors = mixColors;\nexports.encodeColor = encodeColor;\nexports.stringToBits = stringToBits;\nexports.getBitStream = getBitStream;\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getBitStream);\n\nvar randseed = new Array(4); // Xorshift: [x, y, z, w] 32 bit values\n\nfunction seedrand(seed) {\n  randseed.fill(0);\n\n  for (var i = 0; i < seed.length; i++) {\n    randseed[i % 4] = (randseed[i % 4] << 5) - randseed[i % 4] + seed.charCodeAt(i);\n  }\n}\n\nfunction rand() {\n  // based on Java's String.hashCode(), expanded to 4 32bit values\n  var t = randseed[0] ^ randseed[0] << 11;\n  randseed[0] = randseed[1];\n  randseed[1] = randseed[2];\n  randseed[2] = randseed[3];\n  randseed[3] = randseed[3] ^ randseed[3] >> 19 ^ t ^ t >> 8;\n  return (randseed[3] >>> 0) / (1 << 31 >>> 0);\n}\n\nfunction createColor() {\n  //saturation is the whole color spectrum\n  var h = Math.floor(rand() * 360); //saturation goes from 40 to 100, it avoids greyish colors\n\n  var s = rand() * 60 + 40; //lightness can be anything from 0 to 100, but probabilities are a bell curve around 50%\n\n  var l = (rand() + rand() + rand() + rand()) * 25;\n  return {\n    h: h,\n    s: s,\n    l: l\n  };\n}\n\nfunction mixColors(a, b, amt) {\n  return {\n    h: a.h * (1 - amt) + b.h * amt,\n    s: a.s * (1 - amt) + b.s * amt,\n    l: a.l * (1 - amt) + b.l * amt\n  };\n}\n\nfunction encodeColor(_ref) {\n  var h = _ref.h,\n      s = _ref.s,\n      l = _ref.l;\n  return \"hsl(\".concat(h, \", \").concat(s, \"%, \").concat(l, \"%)\");\n}\n\nfunction stringToBits(string) {\n  return Array.from(string).reduce(function (acc, _char) {\n    return acc.concat(_char.charCodeAt().toString(2));\n  }, []).map(function (bin) {\n    return '0'.repeat(8 - bin.length) + bin;\n  }).join('');\n}\n\nfunction getBitStream(string) {\n  var bits, i;\n  return _regeneratorRuntime.wrap(function getBitStream$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          bits = stringToBits(string);\n          i = 0;\n\n        case 2:\n          if (!(i < bits.length)) {\n            _context.next = 8;\n            break;\n          }\n\n          _context.next = 5;\n          return parseInt(bits[i]);\n\n        case 5:\n          i++;\n          _context.next = 2;\n          break;\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":null,"metadata":{},"sourceType":"script"}