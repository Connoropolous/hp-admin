{"ast":null,"code":"import _defineProperty from \"/home/lisa/Documents/gitrepos/holochain/holo/happyTeam/hp-admin/hp-admin/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { instanceCreateZomeCall } from \"../holochainClient\";\nimport { pick } from 'lodash/fp';\nexport const INSTANCE_ID = 'happ-store';\nconst createZomeCall = instanceCreateZomeCall(INSTANCE_ID);\nexport const HappStoreDnaInterface = {\n  currentUser: {\n    get: () => createZomeCall('whoami/get_user')()\n  },\n  happs: {\n    get: id => createZomeCall('happs/get_app')({\n      app_hash: id\n    }).then(happ => presentHapp(happ)),\n    all: () => createZomeCall('happs/get_all_apps')().then(happs => happs.map(presentHapp))\n  }\n};\nexport function presentHapp(happ) {\n  return _objectSpread({\n    id: happ.address\n  }, pick(['title', 'description', 'thumbnailUrl', 'homepageUrl'], happ.appEntry), {\n    // we currently only support a single dna\n    dnaHash: happ.appEntry.dnas[0].hash\n  });\n}\nexport async function getHappDetails(happ) {\n  const details = await HappStoreDnaInterface.happs.get(happ.happStoreId);\n  return _objectSpread({}, happ, {}, pick(['title', 'description', 'thumbnailUrl', 'homepageUrl', 'dnaHash'], details));\n}\nexport default HappStoreDnaInterface;","map":{"version":3,"sources":["/home/lisa/Documents/gitrepos/holochain/holo/happyTeam/hp-admin/hp-admin/src/data-interfaces/HappStoreDnaInterface.js"],"names":["instanceCreateZomeCall","pick","INSTANCE_ID","createZomeCall","HappStoreDnaInterface","currentUser","get","happs","id","app_hash","then","happ","presentHapp","all","map","address","appEntry","dnaHash","dnas","hash","getHappDetails","details","happStoreId"],"mappings":";;;;;;AAAA,SAASA,sBAAT;AACA,SAASC,IAAT,QAAqB,WAArB;AAEA,OAAO,MAAMC,WAAW,GAAG,YAApB;AACP,MAAMC,cAAc,GAAGH,sBAAsB,CAACE,WAAD,CAA7C;AAEA,OAAO,MAAME,qBAAqB,GAAG;AACnCC,EAAAA,WAAW,EAAE;AACXC,IAAAA,GAAG,EAAE,MAAMH,cAAc,CAAC,iBAAD,CAAd;AADA,GADsB;AAInCI,EAAAA,KAAK,EAAE;AACLD,IAAAA,GAAG,EAAEE,EAAE,IAAIL,cAAc,CAAC,eAAD,CAAd,CAAgC;AAAEM,MAAAA,QAAQ,EAAED;AAAZ,KAAhC,EACRE,IADQ,CACHC,IAAI,IAAIC,WAAW,CAACD,IAAD,CADhB,CADN;AAGLE,IAAAA,GAAG,EAAE,MAAMV,cAAc,CAAC,oBAAD,CAAd,GACRO,IADQ,CACHH,KAAK,IAAIA,KAAK,CAACO,GAAN,CAAUF,WAAV,CADN;AAHN;AAJ4B,CAA9B;AAYP,OAAO,SAASA,WAAT,CAAsBD,IAAtB,EAA4B;AACjC;AACEH,IAAAA,EAAE,EAAEG,IAAI,CAACI;AADX,KAEKd,IAAI,CAAC,CAAC,OAAD,EAAU,aAAV,EAAyB,cAAzB,EAAyC,aAAzC,CAAD,EAA0DU,IAAI,CAACK,QAA/D,CAFT;AAGE;AACAC,IAAAA,OAAO,EAAEN,IAAI,CAACK,QAAL,CAAcE,IAAd,CAAmB,CAAnB,EAAsBC;AAJjC;AAMD;AAED,OAAO,eAAeC,cAAf,CAA+BT,IAA/B,EAAqC;AAC1C,QAAMU,OAAO,GAAG,MAAMjB,qBAAqB,CAACG,KAAtB,CAA4BD,GAA5B,CAAgCK,IAAI,CAACW,WAArC,CAAtB;AACA,2BACKX,IADL,MAEKV,IAAI,CAAC,CAAC,OAAD,EAAU,aAAV,EAAyB,cAAzB,EAAyC,aAAzC,EAAwD,SAAxD,CAAD,EAAqEoB,OAArE,CAFT;AAID;AAED,eAAejB,qBAAf","sourcesContent":["import { instanceCreateZomeCall } from '../holochainClient'\nimport { pick } from 'lodash/fp'\n\nexport const INSTANCE_ID = 'happ-store'\nconst createZomeCall = instanceCreateZomeCall(INSTANCE_ID)\n\nexport const HappStoreDnaInterface = {\n  currentUser: {\n    get: () => createZomeCall('whoami/get_user')()\n  },\n  happs: {\n    get: id => createZomeCall('happs/get_app')({ app_hash: id })\n      .then(happ => presentHapp(happ)),\n    all: () => createZomeCall('happs/get_all_apps')()\n      .then(happs => happs.map(presentHapp))\n  }\n}\n\nexport function presentHapp (happ) {\n  return {\n    id: happ.address,\n    ...pick(['title', 'description', 'thumbnailUrl', 'homepageUrl'], happ.appEntry),\n    // we currently only support a single dna\n    dnaHash: happ.appEntry.dnas[0].hash\n  }\n}\n\nexport async function getHappDetails (happ) {\n  const details = await HappStoreDnaInterface.happs.get(happ.happStoreId)\n  return {\n    ...happ,\n    ...pick(['title', 'description', 'thumbnailUrl', 'homepageUrl', 'dnaHash'], details)\n  }\n}\n\nexport default HappStoreDnaInterface\n"]},"metadata":{},"sourceType":"module"}