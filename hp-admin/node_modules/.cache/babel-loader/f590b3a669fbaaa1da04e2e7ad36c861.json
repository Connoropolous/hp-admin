{"ast":null,"code":"var isFunction = require('101/is-function');\n\nvar isInteger = require('101/is-integer');\n\nvar isObject = require('101/is-object');\n\nvar isString = require('101/is-string');\n\nvar assertType = require('./assert-type.js');\n\nvar isClass = require('./is-class.js');\n\nvar NoClass = function () {};\n\nvar startsWithVowel = require('./starts-with-vowel.js');\n\nvar classes = {\n  // primitive classes\n  string: String,\n  number: Number,\n  // extended typeof support\n  array: Array,\n  regexp: RegExp\n};\nmodule.exports = validate;\n/**\n * validate an argument\n * @param  {string} key argument name\n * @param  {*} arg  argument value\n * @param  {string|function} validator argument validator\n */\n\nfunction validate(key, arg, validator, _plural) {\n  if (validator === '*') {\n    return;\n  }\n\n  var keyStr = '\"' + key + '\"';\n  var typeStr;\n  var article;\n  var Class;\n  var errMessage;\n  var assertion;\n\n  if (Array.isArray(validator)) {\n    // circular require\n    return require('./multi-validate.js')(key, arg, validator);\n  } else if (isString(validator)) {\n    // validator is a string\n    typeStr = validator;\n    Class = classes[typeStr] || NoClass;\n    article = startsWithVowel(typeStr) ? 'an' : 'a';\n    errMessage = _plural ? keyStr + ' must be ' + typeStr + 's' : keyStr + ' must be ' + article + ' ' + typeStr;\n\n    if (typeStr === 'integer') {\n      assertion = isInteger(arg);\n    } else if (typeStr === 'object') {\n      assertion = isObject(arg);\n    } else {\n      assertion = arg instanceof Class || typeof arg === validator;\n    }\n\n    assertType(assertion, errMessage);\n  } else if (isClass(validator)) {\n    // validator is a class\n    typeStr = validator.name;\n    Class = validator;\n    errMessage = _plural ? keyStr + ' must be instances of \"' + typeStr + '\"' : keyStr + ' must be an instance of \"' + typeStr + '\"';\n    assertType(arg instanceof Class, errMessage);\n  } else if (isFunction(validator)) {\n    // validator is a test\n    try {\n      // test will throw an error if it fails\n      validator(arg);\n    } catch (e) {\n      e.message = keyStr += ': ' + e.message;\n      throw e;\n    }\n  } else {\n    throw new TypeError('\"validator\" must be a string, class or function');\n  }\n}","map":null,"metadata":{},"sourceType":"script"}