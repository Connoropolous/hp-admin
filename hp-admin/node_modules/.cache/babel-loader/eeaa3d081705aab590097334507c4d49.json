{"ast":null,"code":"import _defineProperty from \"/home/lisa/Documents/gitrepos/holochain/holo/happyTeam/hp-admin/hp-admin/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { invert, isArray } from 'lodash/fp'; // Data mapping, interface <React.Fragment> Hylo UI\n\nexport const interfaceDefaultAttribsMap = () => ({});\n\nconst uiDefaultAttribsMap = () => ({});\n\nexport const toInterfaceKeyMap = {\n  global: {\n    createdAt: 'timestamp',\n    id: 'address',\n    avatarUrl: 'avatar_url'\n  },\n  person: {\n    id: 'agent_id'\n  }\n};\nexport const toUiKeyMap = {};\n\nfor (const key in toInterfaceKeyMap) {\n  toUiKeyMap[key] = invert(toInterfaceKeyMap[key]);\n}\n\nexport const createDataRemapper = initialDataMap => (type, data) => {\n  const clonedData = Object.assign({}, data);\n  const dataMapForType = type in initialDataMap ? initialDataMap[type] : {};\n  const dataMap = Object.assign({}, initialDataMap['global'], dataMapForType);\n  const remappedData = {};\n\n  for (const key in data) {\n    const mappedKey = key in dataMap ? dataMap[key] : key;\n    remappedData[mappedKey] = data[key]; // TODO: Mutating passed object. Used a cloned copy or do another way\n\n    delete clonedData[key];\n  }\n\n  return _objectSpread({}, clonedData, {}, remappedData);\n};\nexport const toInterfaceData = (...args) => {\n  if (typeof args[1] !== 'object' || isArray(args[1])) return args[1];\n  const results = createDataRemapper(toInterfaceKeyMap)(...args);\n  return _objectSpread({}, interfaceDefaultAttribsMap()[args[0]], {}, results);\n};\nexport const toUiData = (...args) => {\n  const results = createDataRemapper(toUiKeyMap)(...args);\n  return _objectSpread({}, uiDefaultAttribsMap()[args[0]], {}, results);\n};\nexport const toUiQuerySet = results => ({\n  total: results.length,\n  items: results,\n  hasMore: false\n});\nexport async function dataMappedCall(entityType, inputData, interfaceFunc) {\n  const interfaceData = toInterfaceData(entityType, inputData);\n  const interfaceResult = await interfaceFunc(interfaceData);\n  return toUiData(entityType, interfaceResult);\n}","map":{"version":3,"sources":["/home/lisa/Documents/gitrepos/holochain/holo/happyTeam/hp-admin/hp-admin/src/graphql-server/dataMapping.js"],"names":["invert","isArray","interfaceDefaultAttribsMap","uiDefaultAttribsMap","toInterfaceKeyMap","global","createdAt","id","avatarUrl","person","toUiKeyMap","key","createDataRemapper","initialDataMap","type","data","clonedData","Object","assign","dataMapForType","dataMap","remappedData","mappedKey","toInterfaceData","args","results","toUiData","toUiQuerySet","total","length","items","hasMore","dataMappedCall","entityType","inputData","interfaceFunc","interfaceData","interfaceResult"],"mappings":";;;;;;AAAA,SAASA,MAAT,EAAiBC,OAAjB,QAAgC,WAAhC,C,CAEA;;AACA,OAAO,MAAMC,0BAA0B,GAAG,OAAO,EAAP,CAAnC;;AAGP,MAAMC,mBAAmB,GAAG,OAAO,EAAP,CAA5B;;AAGA,OAAO,MAAMC,iBAAiB,GAAG;AAC/BC,EAAAA,MAAM,EAAE;AACNC,IAAAA,SAAS,EAAE,WADL;AAENC,IAAAA,EAAE,EAAE,SAFE;AAGNC,IAAAA,SAAS,EAAE;AAHL,GADuB;AAM/BC,EAAAA,MAAM,EAAE;AACNF,IAAAA,EAAE,EAAE;AADE;AANuB,CAA1B;AAWP,OAAO,MAAMG,UAAU,GAAG,EAAnB;;AACP,KAAK,MAAMC,GAAX,IAAkBP,iBAAlB,EAAqC;AACnCM,EAAAA,UAAU,CAACC,GAAD,CAAV,GAAkBX,MAAM,CAACI,iBAAiB,CAACO,GAAD,CAAlB,CAAxB;AACD;;AAED,OAAO,MAAMC,kBAAkB,GAAGC,cAAc,IAAI,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAClE,QAAMC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,IAAlB,CAAnB;AACA,QAAMI,cAAc,GAAGL,IAAI,IAAID,cAAR,GACnBA,cAAc,CAACC,IAAD,CADK,GAEnB,EAFJ;AAGA,QAAMM,OAAO,GAAGH,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,cAAc,CAAC,QAAD,CAAhC,EAA4CM,cAA5C,CAAhB;AACA,QAAME,YAAY,GAAG,EAArB;;AAEA,OAAK,MAAMV,GAAX,IAAkBI,IAAlB,EAAwB;AACtB,UAAMO,SAAS,GAAGX,GAAG,IAAIS,OAAP,GACdA,OAAO,CAACT,GAAD,CADO,GAEdA,GAFJ;AAGAU,IAAAA,YAAY,CAACC,SAAD,CAAZ,GAA0BP,IAAI,CAACJ,GAAD,CAA9B,CAJsB,CAKtB;;AACA,WAAOK,UAAU,CAACL,GAAD,CAAjB;AACD;;AAED,2BACKK,UADL,MAEKK,YAFL;AAID,CArBM;AAuBP,OAAO,MAAME,eAAe,GAAG,CAAC,GAAGC,IAAJ,KAAa;AAC1C,MAAI,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAnB,IAA+BvB,OAAO,CAACuB,IAAI,CAAC,CAAD,CAAL,CAA1C,EAAqD,OAAOA,IAAI,CAAC,CAAD,CAAX;AAErD,QAAMC,OAAO,GAAGb,kBAAkB,CAACR,iBAAD,CAAlB,CAAsC,GAAGoB,IAAzC,CAAhB;AAEA,2BACKtB,0BAA0B,GAAGsB,IAAI,CAAC,CAAD,CAAP,CAD/B,MAEKC,OAFL;AAID,CATM;AAWP,OAAO,MAAMC,QAAQ,GAAG,CAAC,GAAGF,IAAJ,KAAa;AACnC,QAAMC,OAAO,GAAGb,kBAAkB,CAACF,UAAD,CAAlB,CAA+B,GAAGc,IAAlC,CAAhB;AAEA,2BACKrB,mBAAmB,GAAGqB,IAAI,CAAC,CAAD,CAAP,CADxB,MAEKC,OAFL;AAID,CAPM;AASP,OAAO,MAAME,YAAY,GAAGF,OAAO,KAAK;AACtCG,EAAAA,KAAK,EAAEH,OAAO,CAACI,MADuB;AAEtCC,EAAAA,KAAK,EAAEL,OAF+B;AAGtCM,EAAAA,OAAO,EAAE;AAH6B,CAAL,CAA5B;AAMP,OAAO,eAAeC,cAAf,CAA+BC,UAA/B,EAA2CC,SAA3C,EAAsDC,aAAtD,EAAqE;AAC1E,QAAMC,aAAa,GAAGb,eAAe,CAACU,UAAD,EAAaC,SAAb,CAArC;AACA,QAAMG,eAAe,GAAG,MAAMF,aAAa,CAACC,aAAD,CAA3C;AAEA,SAAOV,QAAQ,CAACO,UAAD,EAAaI,eAAb,CAAf;AACD","sourcesContent":["import { invert, isArray } from 'lodash/fp'\n\n// Data mapping, interface <React.Fragment> Hylo UI\nexport const interfaceDefaultAttribsMap = () => ({\n})\n\nconst uiDefaultAttribsMap = () => ({\n})\n\nexport const toInterfaceKeyMap = {\n  global: {\n    createdAt: 'timestamp',\n    id: 'address',\n    avatarUrl: 'avatar_url'\n  },\n  person: {\n    id: 'agent_id'\n  }\n}\n\nexport const toUiKeyMap = {}\nfor (const key in toInterfaceKeyMap) {\n  toUiKeyMap[key] = invert(toInterfaceKeyMap[key])\n}\n\nexport const createDataRemapper = initialDataMap => (type, data) => {\n  const clonedData = Object.assign({}, data)\n  const dataMapForType = type in initialDataMap\n    ? initialDataMap[type]\n    : {}\n  const dataMap = Object.assign({}, initialDataMap['global'], dataMapForType)\n  const remappedData = {}\n\n  for (const key in data) {\n    const mappedKey = key in dataMap\n      ? dataMap[key]\n      : key\n    remappedData[mappedKey] = data[key]\n    // TODO: Mutating passed object. Used a cloned copy or do another way\n    delete clonedData[key]\n  }\n\n  return {\n    ...clonedData,\n    ...remappedData\n  }\n}\n\nexport const toInterfaceData = (...args) => {\n  if (typeof args[1] !== 'object' || isArray(args[1])) return args[1]\n\n  const results = createDataRemapper(toInterfaceKeyMap)(...args)\n\n  return {\n    ...interfaceDefaultAttribsMap()[args[0]],\n    ...results\n  }\n}\n\nexport const toUiData = (...args) => {\n  const results = createDataRemapper(toUiKeyMap)(...args)\n\n  return {\n    ...uiDefaultAttribsMap()[args[0]],\n    ...results\n  }\n}\n\nexport const toUiQuerySet = results => ({\n  total: results.length,\n  items: results,\n  hasMore: false\n})\n\nexport async function dataMappedCall (entityType, inputData, interfaceFunc) {\n  const interfaceData = toInterfaceData(entityType, inputData)\n  const interfaceResult = await interfaceFunc(interfaceData)\n\n  return toUiData(entityType, interfaceResult)\n}\n"]},"metadata":{},"sourceType":"module"}