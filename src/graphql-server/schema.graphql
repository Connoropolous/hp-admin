type Me {
  id: ID
  name: String
  avatarUrl: String
  isRegistered: Boolean
}

type HappStoreUser {
  hash: String
  name: String
}

type HhaUser {
  id: ID
  isRegistered: Boolean
}

type Happ {
  id: ID
  title: String
  description: String  
  thumbnailUrl: String
  homepageUrl: String
  dnaHash: String
  ui: String
  happStoreId: String
  isEnabled: Boolean
}

input OpenHpPortsInput {
  deviceAdminPort: String
  hcAdminPort: String
  hcNetworkPort: String
  hostingPort: String
}

input HpSettingsInput {
  hostName: String
  hostPubKey: String
  hostEmail: String
  deviceName: String
  networkId: String
  sshAccess: Boolean
  ports: OpenHpPortsInput
}

type OpenHpPorts {
  deviceAdminPort: String
  hcAdminPort: String
  hcNetworkPort: String
  hostingPort: String
}

type HpSettings {
  hostName: String
  hostPubKey: String
  hostEmail: String
  deviceName: String
  networkId: String
  sshAccess: Boolean
  ports: OpenHpPorts
}

type Tos {
  tos: String
}

type Query {
  me: Me
  happStoreUser: HappStoreUser
  hostingUser: HhaUser
  allHapps: [Happ]
  allAvailableHapps: [Happ]
  allHostedHapps: [Happ]
  allHPSettings: HpSettings
  hpTermsOfService: String
}

type Mutation {
  registerUser(name: String, avatarUrl: String): Me
  registerHostingUser: HhaUser
  enableHapp(appId: String): Happ
  disableHapp(appId: String): Happ
  updateHPSettings(settings: HpSettingsInput): HpSettings
  factoryReset: Boolean
  toggleSshAccess: Boolean
}
