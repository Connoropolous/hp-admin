type Me {
  id: ID
  name: String
  avatarUrl: String
  isRegistered: Boolean
}

type HappStoreUser {
  hash: String
  name: String
}

type HhaUser {
  id: ID
  isRegistered: Boolean
}

type Happ {
  id: ID
  title: String
  description: String
  thumbnailUrl: String
  homepageUrl: String
  dnaHash: String
  ui: String
  happStoreId: String
  isEnabled: Boolean
}

type HostPricing {
  units: String
  pricePerUnit: String
}

type Ledger {
  balance: Int
  credit: Int
  payable: Int
  receivable: Int
  fees: Int
}

enum Status {
  pending
  spender
  recipient
}

enum Event {
  Request
  Reject
  Invoice
  Return
  Receipt
  Refund
  Promise
  Cheque 
  Decline
  Recover
  Failure
}

type HfTransaction {
  originTimeStamp: String
  originEvent: Event
  counterparty: String
  txAuthor: String
  amount: String
  fee: String
  event: Event,
  status: Status
  transactionTimestamp: String
  eventCommitHash: String
  dueDate: String
  notes: String
  originCommitHash: String
  promiseCommitSignature: String
  inResponseToTX: String
}

type Query {
  me: Me
  happStoreUser: HappStoreUser
  hostingUser: HhaUser
  allHapps: [Happ]
  allAvailableHapps: [Happ]
  allHostedHapps: [Happ]
  allHoloFuelPendingTransaction:[HfTransaction]
  allHoloFuelCompleteTransations:[HfTransaction]
  allHoloFuelTransations:[HfTransaction]
  hostPricing: HostPricing
}

type Mutation {
  registerUser(name: String, avatarUrl: String): Me
  registerHostingUser: HhaUser
  enableHapp(appId: String): Happ
  disableHapp(appId: String): Happ
  updateHostPricing(units: String, pricePerUnit: String): HostPricing
}
