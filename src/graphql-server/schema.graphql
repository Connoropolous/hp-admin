type Me {
  id: ID
  name: String
  avatarUrl: String
  isRegistered: Boolean
}

type HappStoreUser {
  hash: String
  name: String
}

type HhaHappListing {
  id: ID
  hash: String
  happStoreAddress: String
}

type AddressResult {
 result: String
}

type SourceCodeObject {
  codeHandle: String,
  codeHash: String,
  codeLink: String
}

type Happ {
  id: ID
  title: String
  thumbnailUrl: String
  homepageUrl: String
  hash: String
  ui: SourceCodeObject
  dna: [SourceCodeObject]
}

type HostDocParm {
  host_doc: String
}

type AppHashParm {
  app_hash: String
}

type Query {
  me: Me
  happStoreUser: HappStoreUser
  hostingUser: AddressResult
  allHapps: [Happ]
  allAvailableHapps: [HhaHappListing]
  allHostedHapps: [HhaHappListing]
}

type Mutation {
  registerUser(name: String, avatarUrl: String): Me
  registerHostingUser(host_doc: String): AddressResult
  enableHapp(app_hash: String): AddressResult
  disableHapp(app_hash: String): AddressResult
}
